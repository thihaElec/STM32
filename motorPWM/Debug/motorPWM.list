
motorPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  080042c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080042c0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000816f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001637  00000000  00000000  0002824a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000541  00000000  00000000  00029f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016371  00000000  00000000  0002a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a29  00000000  00000000  0004082a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000871c7  00000000  00000000  00049253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026bc  00000000  00000000  000d041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d2ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004094 	.word	0x08004094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004094 	.word	0x08004094

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char istr[15]={0};
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	f8c3 2007 	str.w	r2, [r3, #7]
	char icnt[15]={0};
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	f8c3 2007 	str.w	r2, [r3, #7]
	int ii=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fb89 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f855 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8e9 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f8bd 	bl	8000744 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  M_control_Init();
 80005ca:	f000 f953 	bl	8000874 <M_control_Init>
  setvbuf(stdin, NULL, _IONBF, 0);
 80005ce:	4b23      	ldr	r3, [pc, #140]	; (800065c <main+0xd0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6858      	ldr	r0, [r3, #4]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2202      	movs	r2, #2
 80005d8:	2100      	movs	r1, #0
 80005da:	f002 f907 	bl	80027ec <setvbuf>

  /* Infinite loop */
  while (1)
  {
	 // accept command - command format e.g F500 or R1000
	printf("Pls input command:");
 80005de:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0xd4>)
 80005e0:	f002 f8e0 	bl	80027a4 <iprintf>
	scanf("%s", istr);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	481e      	ldr	r0, [pc, #120]	; (8000664 <main+0xd8>)
 80005ec:	f002 f8ec 	bl	80027c8 <iscanf>

	for(ii=1;ii<strlen(istr);ii++)
 80005f0:	2301      	movs	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
 80005f4:	e00d      	b.n	8000612 <main+0x86>
	{
		icnt[ii-1]=istr[ii];
 80005f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f8:	3b01      	subs	r3, #1
 80005fa:	f107 0114 	add.w	r1, r7, #20
 80005fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000600:	440a      	add	r2, r1
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	3328      	adds	r3, #40	; 0x28
 8000606:	443b      	add	r3, r7
 8000608:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(ii=1;ii<strlen(istr);ii++)
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	3301      	adds	r3, #1
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fde2 	bl	80001e0 <strlen>
 800061c:	4602      	mov	r2, r0
 800061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000620:	429a      	cmp	r2, r3
 8000622:	d8e8      	bhi.n	80005f6 <main+0x6a>
	}
	icnt[ii-1]='\n';
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	3b01      	subs	r3, #1
 8000628:	3328      	adds	r3, #40	; 0x28
 800062a:	443b      	add	r3, r7
 800062c:	220a      	movs	r2, #10
 800062e:	f803 2c24 	strb.w	r2, [r3, #-36]
	printf("\n\r count:%d\n\r",atoi(icnt));
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff61 	bl	80024fc <atoi>
 800063a:	4603      	mov	r3, r0
 800063c:	4619      	mov	r1, r3
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0xdc>)
 8000640:	f002 f8b0 	bl	80027a4 <iprintf>

	M_movement(istr[0],atoi(icnt));
 8000644:	7d3c      	ldrb	r4, [r7, #20]
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ff57 	bl	80024fc <atoi>
 800064e:	4603      	mov	r3, r0
 8000650:	4619      	mov	r1, r3
 8000652:	4620      	mov	r0, r4
 8000654:	f000 f94a 	bl	80008ec <M_movement>
	printf("Pls input command:");
 8000658:	e7c1      	b.n	80005de <main+0x52>
 800065a:	bf00      	nop
 800065c:	20000064 	.word	0x20000064
 8000660:	080040ac 	.word	0x080040ac
 8000664:	080040c0 	.word	0x080040c0
 8000668:	080040c4 	.word	0x080040c4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f9a7 	bl	80029ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a28      	ldr	r2, [pc, #160]	; (800073c <SystemClock_Config+0xd0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xd4>)
 80006ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e0:	2310      	movs	r3, #16
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ee:	2307      	movs	r3, #7
 80006f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fe04 	bl	8001304 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000702:	f000 f965 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f866 	bl	80017f4 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072e:	f000 f94f 	bl	80009d0 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	; 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f001 fa5a 	bl	8001c34 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f923 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000084 	.word	0x20000084
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a25      	ldr	r2, [pc, #148]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_GPIO_Init+0xd4>)
 8000824:	f000 fd54 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_GPIO_Init+0xd8>)
 8000840:	f000 fbc2 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xd4>)
 800085c:	f000 fbb4 	bl	8000fc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800

08000874 <M_control_Init>:

/* USER CODE BEGIN 4 */
void M_control_Init(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

	/* Enable pin to low */
	HAL_GPIO_WritePin(Motor_Control_Port, EN_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2108      	movs	r1, #8
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <M_control_Init+0x74>)
 800088e:	f000 fd1f 	bl	80012d0 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = EN_Pin;
 8000892:	2308      	movs	r3, #8
 8000894:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Motor_Control_Port, &GPIO_InitStruct);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4810      	ldr	r0, [pc, #64]	; (80008e8 <M_control_Init+0x74>)
 80008a8:	f000 fb8e 	bl	8000fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DIR_Pin;
 80008ac:	2310      	movs	r3, #16
 80008ae:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Motor_Control_Port, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <M_control_Init+0x74>)
 80008c2:	f000 fb81 	bl	8000fc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PUL_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Motor_Control_Port, &GPIO_InitStruct);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <M_control_Init+0x74>)
 80008dc:	f000 fb74 	bl	8000fc8 <HAL_GPIO_Init>
}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40020400 	.word	0x40020400

080008ec <M_movement>:
void M_movement(char dir, int pwmcnt){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
	uint32_t ii;

	if (dir == 'F')
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b46      	cmp	r3, #70	; 0x46
 80008fc:	d105      	bne.n	800090a <M_movement+0x1e>
	{
	  HAL_GPIO_WritePin(Motor_Control_Port, DIR_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <M_movement+0x70>)
 8000904:	f000 fce4 	bl	80012d0 <HAL_GPIO_WritePin>
 8000908:	e009      	b.n	800091e <M_movement+0x32>
	}
	else if(dir == 'R')
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b52      	cmp	r3, #82	; 0x52
 800090e:	d105      	bne.n	800091c <M_movement+0x30>
	{
	  HAL_GPIO_WritePin(Motor_Control_Port, DIR_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <M_movement+0x70>)
 8000916:	f000 fcdb 	bl	80012d0 <HAL_GPIO_WritePin>
 800091a:	e000      	b.n	800091e <M_movement+0x32>
	}
	else
	{
		//
		while(1){} //error assert
 800091c:	e7fe      	b.n	800091c <M_movement+0x30>
	}
	  // pulse
	for(ii=0;ii<pwmcnt;ii++)
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e012      	b.n	800094a <M_movement+0x5e>
	  {
		  HAL_GPIO_WritePin(Motor_Control_Port, PUL_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <M_movement+0x70>)
 800092a:	f000 fcd1 	bl	80012d0 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f000 fa40 	bl	8000db4 <HAL_Delay>
		  HAL_GPIO_WritePin(Motor_Control_Port, PUL_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2120      	movs	r1, #32
 8000938:	4808      	ldr	r0, [pc, #32]	; (800095c <M_movement+0x70>)
 800093a:	f000 fcc9 	bl	80012d0 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 800093e:	2001      	movs	r0, #1
 8000940:	f000 fa38 	bl	8000db4 <HAL_Delay>
	for(ii=0;ii<pwmcnt;ii++)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	429a      	cmp	r2, r3
 8000950:	d3e8      	bcc.n	8000924 <M_movement+0x38>
	  }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40020400 	.word	0x40020400

08000960 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000968:	1d39      	adds	r1, r7, #4
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	2201      	movs	r2, #1
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <__io_putchar+0x20>)
 8000972:	f001 f9ac 	bl	8001cce <HAL_UART_Transmit>

  return ch;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000084 	.word	0x20000084

08000984 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]

  // Clear the Overrun flag just before receiving the first character
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <__io_getchar+0x48>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__io_getchar+0x48>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  // Wait for reception of a character on the USART RX line and echo this
   // character on console
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009a4:	1df9      	adds	r1, r7, #7
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2201      	movs	r2, #1
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <__io_getchar+0x48>)
 80009ae:	f001 fa20 	bl	8001df2 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009b2:	1df9      	adds	r1, r7, #7
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	2201      	movs	r2, #1
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <__io_getchar+0x48>)
 80009bc:	f001 f987 	bl	8001cce <HAL_UART_Transmit>
  return ch;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000084 	.word	0x20000084

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f000 faa0 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12b      	bne.n	8000aa6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa2:	f000 fa91 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f934 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b22:	f7ff ff2f 	bl	8000984 <__io_getchar>
 8000b26:	4601      	mov	r1, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf0      	blt.n	8000b22 <_read+0x12>
  }

  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e009      	b.n	8000b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fefb 	bl	8000960 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf1      	blt.n	8000b5c <_write+0x12>
  }
  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_close>:

int _close(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000baa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_isatty>:

int _isatty(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f001 ff26 	bl	8002a6c <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20018000 	.word	0x20018000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	200000c8 	.word	0x200000c8
 8000c54:	20000220 	.word	0x20000220

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f001 fee5 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc6d 	bl	800058c <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cc0:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8000cc4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cc8:	2000021c 	.word	0x2000021c

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f931 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe6a 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f93b 	bl	8000fae <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f911 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	200000cc 	.word	0x200000cc

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200000cc 	.word	0x200000cc

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff47 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5c 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e159      	b.n	8001298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 8148 	bne.w	8001292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	2b02      	cmp	r3, #2
 8001018:	d130      	bne.n	800107c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	f003 0201 	and.w	r2, r3, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d017      	beq.n	80010b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d123      	bne.n	800110c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	69b9      	ldr	r1, [r7, #24]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0203 	and.w	r2, r3, #3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80a2 	beq.w	8001292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a56      	ldr	r2, [pc, #344]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x2e8>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116a:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_GPIO_Init+0x2ec>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a49      	ldr	r2, [pc, #292]	; (80012b8 <HAL_GPIO_Init+0x2f0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x202>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a48      	ldr	r2, [pc, #288]	; (80012bc <HAL_GPIO_Init+0x2f4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x1fe>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a47      	ldr	r2, [pc, #284]	; (80012c0 <HAL_GPIO_Init+0x2f8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x1fa>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_GPIO_Init+0x2fc>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x1f6>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a45      	ldr	r2, [pc, #276]	; (80012c8 <HAL_GPIO_Init+0x300>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x1f2>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x204>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x204>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x204>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x204>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x204>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <HAL_GPIO_Init+0x2ec>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x304>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x304>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_GPIO_Init+0x304>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a24      	ldr	r2, [pc, #144]	; (80012cc <HAL_GPIO_Init+0x304>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x304>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001262:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x304>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_GPIO_Init+0x304>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128c:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_GPIO_Init+0x304>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f aea2 	bls.w	8000fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e267      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d075      	beq.n	800140e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b04      	cmp	r3, #4
 800132c:	d00c      	beq.n	8001348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d112      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b82      	ldr	r3, [pc, #520]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001346:	d10b      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	4b7e      	ldr	r3, [pc, #504]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d05b      	beq.n	800140c <HAL_RCC_OscConfig+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d157      	bne.n	800140c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e242      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d106      	bne.n	8001378 <HAL_RCC_OscConfig+0x74>
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a75      	ldr	r2, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x98>
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6f      	ldr	r2, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a68      	ldr	r2, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fcee 	bl	8000d9c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fcea 	bl	8000d9c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e207      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xc0>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fcda 	bl	8000d9c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fcd6 	bl	8000d9c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1f3      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0xe8>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1c7      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x244>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fc8f 	bl	8000d9c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fc8b 	bl	8000d9c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1a8      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4925      	ldr	r1, [pc, #148]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x244>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc6e 	bl	8000d9c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc6a 	bl	8000d9c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e187      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d036      	beq.n	800155c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d016      	beq.n	8001524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x248>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fc4e 	bl	8000d9c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fc4a 	bl	8000d9c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e167      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x200>
 8001522:	e01b      	b.n	800155c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x248>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fc37 	bl	8000d9c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	e00e      	b.n	8001550 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fc33 	bl	8000d9c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d907      	bls.n	8001550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e150      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ea      	bne.n	8001532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8097 	beq.w	8001698 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b7d      	ldr	r3, [pc, #500]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a7c      	ldr	r2, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b74      	ldr	r3, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a73      	ldr	r2, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fbf3 	bl	8000d9c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fbef 	bl	8000d9c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e10c      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x2ea>
 80015e0:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e01c      	b.n	8001628 <HAL_RCC_OscConfig+0x324>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x30c>
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5e      	ldr	r2, [pc, #376]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5b      	ldr	r2, [pc, #364]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0x324>
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a57      	ldr	r2, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a54      	ldr	r2, [pc, #336]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d015      	beq.n	800165c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fbb4 	bl	8000d9c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff fbb0 	bl	8000d9c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0cb      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ee      	beq.n	8001638 <HAL_RCC_OscConfig+0x334>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fb9e 	bl	8000d9c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff fb9a 	bl	8000d9c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0b5      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167a:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ee      	bne.n	8001664 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a38      	ldr	r2, [pc, #224]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a1 	beq.w	80017e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d05c      	beq.n	8001768 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d141      	bne.n	800173a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_RCC_OscConfig+0x478>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb6e 	bl	8000d9c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fb6a 	bl	8000d9c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e087      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	491b      	ldr	r1, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x478>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb43 	bl	8000d9c <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fb3f 	bl	8000d9c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e05c      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x416>
 8001738:	e054      	b.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_OscConfig+0x478>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fb2c 	bl	8000d9c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fb28 	bl	8000d9c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e045      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x444>
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e038      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000
 800177c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x4ec>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d028      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d121      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d11a      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d111      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0cc      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d90c      	bls.n	8001830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d044      	beq.n	8001914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e067      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 0203 	bic.w	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4934      	ldr	r1, [pc, #208]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e4:	f7ff fa5a 	bl	8000d9c <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ec:	f7ff fa56 	bl	8000d9c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e04f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 020c 	and.w	r2, r3, #12
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	429a      	cmp	r2, r3
 8001912:	d1eb      	bne.n	80018ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d20c      	bcs.n	800193c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f9ba 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	080040e0 	.word	0x080040e0
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b094      	sub	sp, #80	; 0x50
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
 80019cc:	2300      	movs	r3, #0
 80019ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019d0:	2300      	movs	r3, #0
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d8:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d00d      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x40>
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	f200 80e1 	bhi.w	8001bac <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x3a>
 80019f2:	e0db      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019f8:	e0db      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fe:	e0d8      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a32:	4622      	mov	r2, r4
 8001a34:	462b      	mov	r3, r5
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	0159      	lsls	r1, r3, #5
 8001a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a44:	0150      	lsls	r0, r2, #5
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1a51      	subs	r1, r2, r1
 8001a4e:	6139      	str	r1, [r7, #16]
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb63 0301 	sbc.w	r3, r3, r1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a64:	4659      	mov	r1, fp
 8001a66:	018b      	lsls	r3, r1, #6
 8001a68:	4651      	mov	r1, sl
 8001a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a6e:	4651      	mov	r1, sl
 8001a70:	018a      	lsls	r2, r1, #6
 8001a72:	4651      	mov	r1, sl
 8001a74:	ebb2 0801 	subs.w	r8, r2, r1
 8001a78:	4659      	mov	r1, fp
 8001a7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a92:	4690      	mov	r8, r2
 8001a94:	4699      	mov	r9, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	eb18 0303 	adds.w	r3, r8, r3
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	462b      	mov	r3, r5
 8001aa0:	eb49 0303 	adc.w	r3, r9, r3
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	024b      	lsls	r3, r1, #9
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001abc:	4621      	mov	r1, r4
 8001abe:	024a      	lsls	r2, r1, #9
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001acc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ad0:	f7fe fbde 	bl	8000290 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001adc:	e058      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4611      	mov	r1, r2
 8001aea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001af8:	4642      	mov	r2, r8
 8001afa:	464b      	mov	r3, r9
 8001afc:	f04f 0000 	mov.w	r0, #0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	0159      	lsls	r1, r3, #5
 8001b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b0a:	0150      	lsls	r0, r2, #5
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4641      	mov	r1, r8
 8001b12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b16:	4649      	mov	r1, r9
 8001b18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b30:	ebb2 040a 	subs.w	r4, r2, sl
 8001b34:	eb63 050b 	sbc.w	r5, r3, fp
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	00eb      	lsls	r3, r5, #3
 8001b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b46:	00e2      	lsls	r2, r4, #3
 8001b48:	4614      	mov	r4, r2
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	18e3      	adds	r3, r4, r3
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	464b      	mov	r3, r9
 8001b54:	eb45 0303 	adc.w	r3, r5, r3
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b66:	4629      	mov	r1, r5
 8001b68:	028b      	lsls	r3, r1, #10
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b70:	4621      	mov	r1, r4
 8001b72:	028a      	lsls	r2, r1, #10
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	61fa      	str	r2, [r7, #28]
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	f7fe fb84 	bl	8000290 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3750      	adds	r7, #80	; 0x50
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	007a1200 	.word	0x007a1200

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	080040f0 	.word	0x080040f0

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c10:	f7ff ffdc 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0b5b      	lsrs	r3, r3, #13
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	080040f0 	.word	0x080040f0

08001c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e03f      	b.n	8001cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fee6 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f9cb 	bl	8002014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b08a      	sub	sp, #40	; 0x28
 8001cd2:	af02      	add	r7, sp, #8
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d17c      	bne.n	8001de8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_UART_Transmit+0x2c>
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e075      	b.n	8001dea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_UART_Transmit+0x3e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e06e      	b.n	8001dea <HAL_UART_Transmit+0x11c>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2221      	movs	r2, #33	; 0x21
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d22:	f7ff f83b 	bl	8000d9c <HAL_GetTick>
 8001d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	88fa      	ldrh	r2, [r7, #6]
 8001d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	88fa      	ldrh	r2, [r7, #6]
 8001d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3c:	d108      	bne.n	8001d50 <HAL_UART_Transmit+0x82>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e003      	b.n	8001d58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d60:	e02a      	b.n	8001db8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f8e2 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e036      	b.n	8001dea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3302      	adds	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	e007      	b.n	8001daa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	3301      	adds	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1cf      	bne.n	8001d62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f8b2 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08a      	sub	sp, #40	; 0x28
 8001df6:	af02      	add	r7, sp, #8
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	f040 808c 	bne.w	8001f2c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_UART_Receive+0x2e>
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e084      	b.n	8001f2e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_UART_Receive+0x40>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e07d      	b.n	8001f2e <HAL_UART_Receive+0x13c>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2222      	movs	r2, #34	; 0x22
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e4e:	f7fe ffa5 	bl	8000d9c <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e68:	d108      	bne.n	8001e7c <HAL_UART_Receive+0x8a>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	e003      	b.n	8001e84 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e8c:	e043      	b.n	8001f16 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2120      	movs	r1, #32
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f84c 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e042      	b.n	8001f2e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e01f      	b.n	8001f08 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d007      	beq.n	8001ee2 <HAL_UART_Receive+0xf0>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_UART_Receive+0xfe>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e008      	b.n	8001f02 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1b6      	bne.n	8001e8e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b090      	sub	sp, #64	; 0x40
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f46:	e050      	b.n	8001fea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4e:	d04c      	beq.n	8001fea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f56:	f7fe ff21 	bl	8000d9c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d241      	bcs.n	8001fea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	e853 3f00 	ldrex	r3, [r3]
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	330c      	adds	r3, #12
 8001f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f86:	637a      	str	r2, [r7, #52]	; 0x34
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f8e:	e841 2300 	strex	r3, r2, [r1]
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e5      	bne.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3314      	adds	r3, #20
 8001fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	e853 3f00 	ldrex	r3, [r3]
 8001fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fba:	623a      	str	r2, [r7, #32]
 8001fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fbe:	69f9      	ldr	r1, [r7, #28]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	e841 2300 	strex	r3, r2, [r1]
 8001fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1e5      	bne.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e00f      	b.n	800200a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	429a      	cmp	r2, r3
 8002006:	d09f      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3740      	adds	r7, #64	; 0x40
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002018:	b0c0      	sub	sp, #256	; 0x100
 800201a:	af00      	add	r7, sp, #0
 800201c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002030:	68d9      	ldr	r1, [r3, #12]
 8002032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	ea40 0301 	orr.w	r3, r0, r1
 800203c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	431a      	orrs	r2, r3
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	431a      	orrs	r2, r3
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800206c:	f021 010c 	bic.w	r1, r1, #12
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800207a:	430b      	orrs	r3, r1
 800207c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208e:	6999      	ldr	r1, [r3, #24]
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	ea40 0301 	orr.w	r3, r0, r1
 800209a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b8f      	ldr	r3, [pc, #572]	; (80022e0 <UART_SetConfig+0x2cc>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d005      	beq.n	80020b4 <UART_SetConfig+0xa0>
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b8d      	ldr	r3, [pc, #564]	; (80022e4 <UART_SetConfig+0x2d0>)
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d104      	bne.n	80020be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020b4:	f7ff fdaa 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 80020b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020bc:	e003      	b.n	80020c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020be:	f7ff fd91 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80020c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d0:	f040 810c 	bne.w	80022ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d8:	2200      	movs	r2, #0
 80020da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020e6:	4622      	mov	r2, r4
 80020e8:	462b      	mov	r3, r5
 80020ea:	1891      	adds	r1, r2, r2
 80020ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80020ee:	415b      	adcs	r3, r3
 80020f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020f6:	4621      	mov	r1, r4
 80020f8:	eb12 0801 	adds.w	r8, r2, r1
 80020fc:	4629      	mov	r1, r5
 80020fe:	eb43 0901 	adc.w	r9, r3, r1
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002116:	4690      	mov	r8, r2
 8002118:	4699      	mov	r9, r3
 800211a:	4623      	mov	r3, r4
 800211c:	eb18 0303 	adds.w	r3, r8, r3
 8002120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002124:	462b      	mov	r3, r5
 8002126:	eb49 0303 	adc.w	r3, r9, r3
 800212a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800213a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800213e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002142:	460b      	mov	r3, r1
 8002144:	18db      	adds	r3, r3, r3
 8002146:	653b      	str	r3, [r7, #80]	; 0x50
 8002148:	4613      	mov	r3, r2
 800214a:	eb42 0303 	adc.w	r3, r2, r3
 800214e:	657b      	str	r3, [r7, #84]	; 0x54
 8002150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002158:	f7fe f89a 	bl	8000290 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <UART_SetConfig+0x2d4>)
 8002162:	fba3 2302 	umull	r2, r3, r3, r2
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	011c      	lsls	r4, r3, #4
 800216a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800217c:	4642      	mov	r2, r8
 800217e:	464b      	mov	r3, r9
 8002180:	1891      	adds	r1, r2, r2
 8002182:	64b9      	str	r1, [r7, #72]	; 0x48
 8002184:	415b      	adcs	r3, r3
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800218c:	4641      	mov	r1, r8
 800218e:	eb12 0a01 	adds.w	sl, r2, r1
 8002192:	4649      	mov	r1, r9
 8002194:	eb43 0b01 	adc.w	fp, r3, r1
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ac:	4692      	mov	sl, r2
 80021ae:	469b      	mov	fp, r3
 80021b0:	4643      	mov	r3, r8
 80021b2:	eb1a 0303 	adds.w	r3, sl, r3
 80021b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ba:	464b      	mov	r3, r9
 80021bc:	eb4b 0303 	adc.w	r3, fp, r3
 80021c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021d8:	460b      	mov	r3, r1
 80021da:	18db      	adds	r3, r3, r3
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
 80021de:	4613      	mov	r3, r2
 80021e0:	eb42 0303 	adc.w	r3, r2, r3
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
 80021e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021ee:	f7fe f84f 	bl	8000290 <__aeabi_uldivmod>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <UART_SetConfig+0x2d4>)
 80021fa:	fba3 2301 	umull	r2, r3, r3, r1
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2264      	movs	r2, #100	; 0x64
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	1acb      	subs	r3, r1, r3
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <UART_SetConfig+0x2d4>)
 8002210:	fba3 2302 	umull	r2, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800221c:	441c      	add	r4, r3
 800221e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800222c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002230:	4642      	mov	r2, r8
 8002232:	464b      	mov	r3, r9
 8002234:	1891      	adds	r1, r2, r2
 8002236:	63b9      	str	r1, [r7, #56]	; 0x38
 8002238:	415b      	adcs	r3, r3
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800223c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002240:	4641      	mov	r1, r8
 8002242:	1851      	adds	r1, r2, r1
 8002244:	6339      	str	r1, [r7, #48]	; 0x30
 8002246:	4649      	mov	r1, r9
 8002248:	414b      	adcs	r3, r1
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002258:	4659      	mov	r1, fp
 800225a:	00cb      	lsls	r3, r1, #3
 800225c:	4651      	mov	r1, sl
 800225e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002262:	4651      	mov	r1, sl
 8002264:	00ca      	lsls	r2, r1, #3
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	4603      	mov	r3, r0
 800226c:	4642      	mov	r2, r8
 800226e:	189b      	adds	r3, r3, r2
 8002270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002274:	464b      	mov	r3, r9
 8002276:	460a      	mov	r2, r1
 8002278:	eb42 0303 	adc.w	r3, r2, r3
 800227c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800228c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002294:	460b      	mov	r3, r1
 8002296:	18db      	adds	r3, r3, r3
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
 800229a:	4613      	mov	r3, r2
 800229c:	eb42 0303 	adc.w	r3, r2, r3
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022aa:	f7fd fff1 	bl	8000290 <__aeabi_uldivmod>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <UART_SetConfig+0x2d4>)
 80022b4:	fba3 1302 	umull	r1, r3, r3, r2
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	2164      	movs	r1, #100	; 0x64
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3332      	adds	r3, #50	; 0x32
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <UART_SetConfig+0x2d4>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4422      	add	r2, r4
 80022da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022dc:	e106      	b.n	80024ec <UART_SetConfig+0x4d8>
 80022de:	bf00      	nop
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40011400 	.word	0x40011400
 80022e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f0:	2200      	movs	r2, #0
 80022f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022fe:	4642      	mov	r2, r8
 8002300:	464b      	mov	r3, r9
 8002302:	1891      	adds	r1, r2, r2
 8002304:	6239      	str	r1, [r7, #32]
 8002306:	415b      	adcs	r3, r3
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800230e:	4641      	mov	r1, r8
 8002310:	1854      	adds	r4, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb43 0501 	adc.w	r5, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	00eb      	lsls	r3, r5, #3
 8002322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002326:	00e2      	lsls	r2, r4, #3
 8002328:	4614      	mov	r4, r2
 800232a:	461d      	mov	r5, r3
 800232c:	4643      	mov	r3, r8
 800232e:	18e3      	adds	r3, r4, r3
 8002330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002334:	464b      	mov	r3, r9
 8002336:	eb45 0303 	adc.w	r3, r5, r3
 800233a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800234a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800235a:	4629      	mov	r1, r5
 800235c:	008b      	lsls	r3, r1, #2
 800235e:	4621      	mov	r1, r4
 8002360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002364:	4621      	mov	r1, r4
 8002366:	008a      	lsls	r2, r1, #2
 8002368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800236c:	f7fd ff90 	bl	8000290 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <UART_SetConfig+0x4e4>)
 8002376:	fba3 2302 	umull	r2, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	011c      	lsls	r4, r3, #4
 800237e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002382:	2200      	movs	r2, #0
 8002384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800238c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002390:	4642      	mov	r2, r8
 8002392:	464b      	mov	r3, r9
 8002394:	1891      	adds	r1, r2, r2
 8002396:	61b9      	str	r1, [r7, #24]
 8002398:	415b      	adcs	r3, r3
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a0:	4641      	mov	r1, r8
 80023a2:	1851      	adds	r1, r2, r1
 80023a4:	6139      	str	r1, [r7, #16]
 80023a6:	4649      	mov	r1, r9
 80023a8:	414b      	adcs	r3, r1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b8:	4659      	mov	r1, fp
 80023ba:	00cb      	lsls	r3, r1, #3
 80023bc:	4651      	mov	r1, sl
 80023be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023c2:	4651      	mov	r1, sl
 80023c4:	00ca      	lsls	r2, r1, #3
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	4642      	mov	r2, r8
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023d4:	464b      	mov	r3, r9
 80023d6:	460a      	mov	r2, r1
 80023d8:	eb42 0303 	adc.w	r3, r2, r3
 80023dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023f8:	4649      	mov	r1, r9
 80023fa:	008b      	lsls	r3, r1, #2
 80023fc:	4641      	mov	r1, r8
 80023fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002402:	4641      	mov	r1, r8
 8002404:	008a      	lsls	r2, r1, #2
 8002406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800240a:	f7fd ff41 	bl	8000290 <__aeabi_uldivmod>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4611      	mov	r1, r2
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <UART_SetConfig+0x4e4>)
 8002416:	fba3 2301 	umull	r2, r3, r3, r1
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2264      	movs	r2, #100	; 0x64
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	1acb      	subs	r3, r1, r3
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	3332      	adds	r3, #50	; 0x32
 8002428:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <UART_SetConfig+0x4e4>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002434:	441c      	add	r4, r3
 8002436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243a:	2200      	movs	r2, #0
 800243c:	673b      	str	r3, [r7, #112]	; 0x70
 800243e:	677a      	str	r2, [r7, #116]	; 0x74
 8002440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002444:	4642      	mov	r2, r8
 8002446:	464b      	mov	r3, r9
 8002448:	1891      	adds	r1, r2, r2
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	415b      	adcs	r3, r3
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	4641      	mov	r1, r8
 8002456:	1851      	adds	r1, r2, r1
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	4649      	mov	r1, r9
 800245c:	414b      	adcs	r3, r1
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800246c:	4659      	mov	r1, fp
 800246e:	00cb      	lsls	r3, r1, #3
 8002470:	4651      	mov	r1, sl
 8002472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002476:	4651      	mov	r1, sl
 8002478:	00ca      	lsls	r2, r1, #3
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	4603      	mov	r3, r0
 8002480:	4642      	mov	r2, r8
 8002482:	189b      	adds	r3, r3, r2
 8002484:	66bb      	str	r3, [r7, #104]	; 0x68
 8002486:	464b      	mov	r3, r9
 8002488:	460a      	mov	r2, r1
 800248a:	eb42 0303 	adc.w	r3, r2, r3
 800248e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	663b      	str	r3, [r7, #96]	; 0x60
 800249a:	667a      	str	r2, [r7, #100]	; 0x64
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024a8:	4649      	mov	r1, r9
 80024aa:	008b      	lsls	r3, r1, #2
 80024ac:	4641      	mov	r1, r8
 80024ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024b2:	4641      	mov	r1, r8
 80024b4:	008a      	lsls	r2, r1, #2
 80024b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024ba:	f7fd fee9 	bl	8000290 <__aeabi_uldivmod>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <UART_SetConfig+0x4e4>)
 80024c4:	fba3 1302 	umull	r1, r3, r3, r2
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	2164      	movs	r1, #100	; 0x64
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	3332      	adds	r3, #50	; 0x32
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <UART_SetConfig+0x4e4>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4422      	add	r2, r4
 80024ea:	609a      	str	r2, [r3, #8]
}
 80024ec:	bf00      	nop
 80024ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024f2:	46bd      	mov	sp, r7
 80024f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024f8:	51eb851f 	.word	0x51eb851f

080024fc <atoi>:
 80024fc:	220a      	movs	r2, #10
 80024fe:	2100      	movs	r1, #0
 8002500:	f000 b884 	b.w	800260c <strtol>

08002504 <_strtol_l.constprop.0>:
 8002504:	2b01      	cmp	r3, #1
 8002506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800250a:	d001      	beq.n	8002510 <_strtol_l.constprop.0+0xc>
 800250c:	2b24      	cmp	r3, #36	; 0x24
 800250e:	d906      	bls.n	800251e <_strtol_l.constprop.0+0x1a>
 8002510:	f000 faac 	bl	8002a6c <__errno>
 8002514:	2316      	movs	r3, #22
 8002516:	6003      	str	r3, [r0, #0]
 8002518:	2000      	movs	r0, #0
 800251a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002604 <_strtol_l.constprop.0+0x100>
 8002522:	460d      	mov	r5, r1
 8002524:	462e      	mov	r6, r5
 8002526:	f815 4b01 	ldrb.w	r4, [r5], #1
 800252a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800252e:	f017 0708 	ands.w	r7, r7, #8
 8002532:	d1f7      	bne.n	8002524 <_strtol_l.constprop.0+0x20>
 8002534:	2c2d      	cmp	r4, #45	; 0x2d
 8002536:	d132      	bne.n	800259e <_strtol_l.constprop.0+0x9a>
 8002538:	782c      	ldrb	r4, [r5, #0]
 800253a:	2701      	movs	r7, #1
 800253c:	1cb5      	adds	r5, r6, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d05b      	beq.n	80025fa <_strtol_l.constprop.0+0xf6>
 8002542:	2b10      	cmp	r3, #16
 8002544:	d109      	bne.n	800255a <_strtol_l.constprop.0+0x56>
 8002546:	2c30      	cmp	r4, #48	; 0x30
 8002548:	d107      	bne.n	800255a <_strtol_l.constprop.0+0x56>
 800254a:	782c      	ldrb	r4, [r5, #0]
 800254c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002550:	2c58      	cmp	r4, #88	; 0x58
 8002552:	d14d      	bne.n	80025f0 <_strtol_l.constprop.0+0xec>
 8002554:	786c      	ldrb	r4, [r5, #1]
 8002556:	2310      	movs	r3, #16
 8002558:	3502      	adds	r5, #2
 800255a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800255e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002562:	f04f 0e00 	mov.w	lr, #0
 8002566:	fbb8 f9f3 	udiv	r9, r8, r3
 800256a:	4676      	mov	r6, lr
 800256c:	fb03 8a19 	mls	sl, r3, r9, r8
 8002570:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002574:	f1bc 0f09 	cmp.w	ip, #9
 8002578:	d816      	bhi.n	80025a8 <_strtol_l.constprop.0+0xa4>
 800257a:	4664      	mov	r4, ip
 800257c:	42a3      	cmp	r3, r4
 800257e:	dd24      	ble.n	80025ca <_strtol_l.constprop.0+0xc6>
 8002580:	f1be 3fff 	cmp.w	lr, #4294967295
 8002584:	d008      	beq.n	8002598 <_strtol_l.constprop.0+0x94>
 8002586:	45b1      	cmp	r9, r6
 8002588:	d31c      	bcc.n	80025c4 <_strtol_l.constprop.0+0xc0>
 800258a:	d101      	bne.n	8002590 <_strtol_l.constprop.0+0x8c>
 800258c:	45a2      	cmp	sl, r4
 800258e:	db19      	blt.n	80025c4 <_strtol_l.constprop.0+0xc0>
 8002590:	fb06 4603 	mla	r6, r6, r3, r4
 8002594:	f04f 0e01 	mov.w	lr, #1
 8002598:	f815 4b01 	ldrb.w	r4, [r5], #1
 800259c:	e7e8      	b.n	8002570 <_strtol_l.constprop.0+0x6c>
 800259e:	2c2b      	cmp	r4, #43	; 0x2b
 80025a0:	bf04      	itt	eq
 80025a2:	782c      	ldrbeq	r4, [r5, #0]
 80025a4:	1cb5      	addeq	r5, r6, #2
 80025a6:	e7ca      	b.n	800253e <_strtol_l.constprop.0+0x3a>
 80025a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80025ac:	f1bc 0f19 	cmp.w	ip, #25
 80025b0:	d801      	bhi.n	80025b6 <_strtol_l.constprop.0+0xb2>
 80025b2:	3c37      	subs	r4, #55	; 0x37
 80025b4:	e7e2      	b.n	800257c <_strtol_l.constprop.0+0x78>
 80025b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80025ba:	f1bc 0f19 	cmp.w	ip, #25
 80025be:	d804      	bhi.n	80025ca <_strtol_l.constprop.0+0xc6>
 80025c0:	3c57      	subs	r4, #87	; 0x57
 80025c2:	e7db      	b.n	800257c <_strtol_l.constprop.0+0x78>
 80025c4:	f04f 3eff 	mov.w	lr, #4294967295
 80025c8:	e7e6      	b.n	8002598 <_strtol_l.constprop.0+0x94>
 80025ca:	f1be 3fff 	cmp.w	lr, #4294967295
 80025ce:	d105      	bne.n	80025dc <_strtol_l.constprop.0+0xd8>
 80025d0:	2322      	movs	r3, #34	; 0x22
 80025d2:	6003      	str	r3, [r0, #0]
 80025d4:	4646      	mov	r6, r8
 80025d6:	b942      	cbnz	r2, 80025ea <_strtol_l.constprop.0+0xe6>
 80025d8:	4630      	mov	r0, r6
 80025da:	e79e      	b.n	800251a <_strtol_l.constprop.0+0x16>
 80025dc:	b107      	cbz	r7, 80025e0 <_strtol_l.constprop.0+0xdc>
 80025de:	4276      	negs	r6, r6
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d0f9      	beq.n	80025d8 <_strtol_l.constprop.0+0xd4>
 80025e4:	f1be 0f00 	cmp.w	lr, #0
 80025e8:	d000      	beq.n	80025ec <_strtol_l.constprop.0+0xe8>
 80025ea:	1e69      	subs	r1, r5, #1
 80025ec:	6011      	str	r1, [r2, #0]
 80025ee:	e7f3      	b.n	80025d8 <_strtol_l.constprop.0+0xd4>
 80025f0:	2430      	movs	r4, #48	; 0x30
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1b1      	bne.n	800255a <_strtol_l.constprop.0+0x56>
 80025f6:	2308      	movs	r3, #8
 80025f8:	e7af      	b.n	800255a <_strtol_l.constprop.0+0x56>
 80025fa:	2c30      	cmp	r4, #48	; 0x30
 80025fc:	d0a5      	beq.n	800254a <_strtol_l.constprop.0+0x46>
 80025fe:	230a      	movs	r3, #10
 8002600:	e7ab      	b.n	800255a <_strtol_l.constprop.0+0x56>
 8002602:	bf00      	nop
 8002604:	080040f9 	.word	0x080040f9

08002608 <_strtol_r>:
 8002608:	f7ff bf7c 	b.w	8002504 <_strtol_l.constprop.0>

0800260c <strtol>:
 800260c:	4613      	mov	r3, r2
 800260e:	460a      	mov	r2, r1
 8002610:	4601      	mov	r1, r0
 8002612:	4802      	ldr	r0, [pc, #8]	; (800261c <strtol+0x10>)
 8002614:	6800      	ldr	r0, [r0, #0]
 8002616:	f7ff bf75 	b.w	8002504 <_strtol_l.constprop.0>
 800261a:	bf00      	nop
 800261c:	20000064 	.word	0x20000064

08002620 <std>:
 8002620:	2300      	movs	r3, #0
 8002622:	b510      	push	{r4, lr}
 8002624:	4604      	mov	r4, r0
 8002626:	e9c0 3300 	strd	r3, r3, [r0]
 800262a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800262e:	6083      	str	r3, [r0, #8]
 8002630:	8181      	strh	r1, [r0, #12]
 8002632:	6643      	str	r3, [r0, #100]	; 0x64
 8002634:	81c2      	strh	r2, [r0, #14]
 8002636:	6183      	str	r3, [r0, #24]
 8002638:	4619      	mov	r1, r3
 800263a:	2208      	movs	r2, #8
 800263c:	305c      	adds	r0, #92	; 0x5c
 800263e:	f000 f9c6 	bl	80029ce <memset>
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <std+0x58>)
 8002644:	6263      	str	r3, [r4, #36]	; 0x24
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <std+0x5c>)
 8002648:	62a3      	str	r3, [r4, #40]	; 0x28
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <std+0x60>)
 800264c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <std+0x64>)
 8002650:	6323      	str	r3, [r4, #48]	; 0x30
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <std+0x68>)
 8002654:	6224      	str	r4, [r4, #32]
 8002656:	429c      	cmp	r4, r3
 8002658:	d006      	beq.n	8002668 <std+0x48>
 800265a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800265e:	4294      	cmp	r4, r2
 8002660:	d002      	beq.n	8002668 <std+0x48>
 8002662:	33d0      	adds	r3, #208	; 0xd0
 8002664:	429c      	cmp	r4, r3
 8002666:	d105      	bne.n	8002674 <std+0x54>
 8002668:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002670:	f000 ba26 	b.w	8002ac0 <__retarget_lock_init_recursive>
 8002674:	bd10      	pop	{r4, pc}
 8002676:	bf00      	nop
 8002678:	08002949 	.word	0x08002949
 800267c:	0800296b 	.word	0x0800296b
 8002680:	080029a3 	.word	0x080029a3
 8002684:	080029c7 	.word	0x080029c7
 8002688:	200000d0 	.word	0x200000d0

0800268c <stdio_exit_handler>:
 800268c:	4a02      	ldr	r2, [pc, #8]	; (8002698 <stdio_exit_handler+0xc>)
 800268e:	4903      	ldr	r1, [pc, #12]	; (800269c <stdio_exit_handler+0x10>)
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <stdio_exit_handler+0x14>)
 8002692:	f000 b869 	b.w	8002768 <_fwalk_sglue>
 8002696:	bf00      	nop
 8002698:	2000000c 	.word	0x2000000c
 800269c:	08003985 	.word	0x08003985
 80026a0:	20000018 	.word	0x20000018

080026a4 <cleanup_stdio>:
 80026a4:	6841      	ldr	r1, [r0, #4]
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <cleanup_stdio+0x34>)
 80026a8:	4299      	cmp	r1, r3
 80026aa:	b510      	push	{r4, lr}
 80026ac:	4604      	mov	r4, r0
 80026ae:	d001      	beq.n	80026b4 <cleanup_stdio+0x10>
 80026b0:	f001 f968 	bl	8003984 <_fflush_r>
 80026b4:	68a1      	ldr	r1, [r4, #8]
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <cleanup_stdio+0x38>)
 80026b8:	4299      	cmp	r1, r3
 80026ba:	d002      	beq.n	80026c2 <cleanup_stdio+0x1e>
 80026bc:	4620      	mov	r0, r4
 80026be:	f001 f961 	bl	8003984 <_fflush_r>
 80026c2:	68e1      	ldr	r1, [r4, #12]
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <cleanup_stdio+0x3c>)
 80026c6:	4299      	cmp	r1, r3
 80026c8:	d004      	beq.n	80026d4 <cleanup_stdio+0x30>
 80026ca:	4620      	mov	r0, r4
 80026cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d0:	f001 b958 	b.w	8003984 <_fflush_r>
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	bf00      	nop
 80026d8:	200000d0 	.word	0x200000d0
 80026dc:	20000138 	.word	0x20000138
 80026e0:	200001a0 	.word	0x200001a0

080026e4 <global_stdio_init.part.0>:
 80026e4:	b510      	push	{r4, lr}
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <global_stdio_init.part.0+0x30>)
 80026e8:	4c0b      	ldr	r4, [pc, #44]	; (8002718 <global_stdio_init.part.0+0x34>)
 80026ea:	4a0c      	ldr	r2, [pc, #48]	; (800271c <global_stdio_init.part.0+0x38>)
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4620      	mov	r0, r4
 80026f0:	2200      	movs	r2, #0
 80026f2:	2104      	movs	r1, #4
 80026f4:	f7ff ff94 	bl	8002620 <std>
 80026f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80026fc:	2201      	movs	r2, #1
 80026fe:	2109      	movs	r1, #9
 8002700:	f7ff ff8e 	bl	8002620 <std>
 8002704:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002708:	2202      	movs	r2, #2
 800270a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800270e:	2112      	movs	r1, #18
 8002710:	f7ff bf86 	b.w	8002620 <std>
 8002714:	20000208 	.word	0x20000208
 8002718:	200000d0 	.word	0x200000d0
 800271c:	0800268d 	.word	0x0800268d

08002720 <__sfp_lock_acquire>:
 8002720:	4801      	ldr	r0, [pc, #4]	; (8002728 <__sfp_lock_acquire+0x8>)
 8002722:	f000 b9ce 	b.w	8002ac2 <__retarget_lock_acquire_recursive>
 8002726:	bf00      	nop
 8002728:	20000211 	.word	0x20000211

0800272c <__sfp_lock_release>:
 800272c:	4801      	ldr	r0, [pc, #4]	; (8002734 <__sfp_lock_release+0x8>)
 800272e:	f000 b9c9 	b.w	8002ac4 <__retarget_lock_release_recursive>
 8002732:	bf00      	nop
 8002734:	20000211 	.word	0x20000211

08002738 <__sinit>:
 8002738:	b510      	push	{r4, lr}
 800273a:	4604      	mov	r4, r0
 800273c:	f7ff fff0 	bl	8002720 <__sfp_lock_acquire>
 8002740:	6a23      	ldr	r3, [r4, #32]
 8002742:	b11b      	cbz	r3, 800274c <__sinit+0x14>
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002748:	f7ff bff0 	b.w	800272c <__sfp_lock_release>
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__sinit+0x28>)
 800274e:	6223      	str	r3, [r4, #32]
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__sinit+0x2c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f5      	bne.n	8002744 <__sinit+0xc>
 8002758:	f7ff ffc4 	bl	80026e4 <global_stdio_init.part.0>
 800275c:	e7f2      	b.n	8002744 <__sinit+0xc>
 800275e:	bf00      	nop
 8002760:	080026a5 	.word	0x080026a5
 8002764:	20000208 	.word	0x20000208

08002768 <_fwalk_sglue>:
 8002768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800276c:	4607      	mov	r7, r0
 800276e:	4688      	mov	r8, r1
 8002770:	4614      	mov	r4, r2
 8002772:	2600      	movs	r6, #0
 8002774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002778:	f1b9 0901 	subs.w	r9, r9, #1
 800277c:	d505      	bpl.n	800278a <_fwalk_sglue+0x22>
 800277e:	6824      	ldr	r4, [r4, #0]
 8002780:	2c00      	cmp	r4, #0
 8002782:	d1f7      	bne.n	8002774 <_fwalk_sglue+0xc>
 8002784:	4630      	mov	r0, r6
 8002786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800278a:	89ab      	ldrh	r3, [r5, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d907      	bls.n	80027a0 <_fwalk_sglue+0x38>
 8002790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002794:	3301      	adds	r3, #1
 8002796:	d003      	beq.n	80027a0 <_fwalk_sglue+0x38>
 8002798:	4629      	mov	r1, r5
 800279a:	4638      	mov	r0, r7
 800279c:	47c0      	blx	r8
 800279e:	4306      	orrs	r6, r0
 80027a0:	3568      	adds	r5, #104	; 0x68
 80027a2:	e7e9      	b.n	8002778 <_fwalk_sglue+0x10>

080027a4 <iprintf>:
 80027a4:	b40f      	push	{r0, r1, r2, r3}
 80027a6:	b507      	push	{r0, r1, r2, lr}
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <iprintf+0x20>)
 80027aa:	ab04      	add	r3, sp, #16
 80027ac:	6808      	ldr	r0, [r1, #0]
 80027ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80027b2:	6881      	ldr	r1, [r0, #8]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	f000 fab1 	bl	8002d1c <_vfiprintf_r>
 80027ba:	b003      	add	sp, #12
 80027bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80027c0:	b004      	add	sp, #16
 80027c2:	4770      	bx	lr
 80027c4:	20000064 	.word	0x20000064

080027c8 <iscanf>:
 80027c8:	b40f      	push	{r0, r1, r2, r3}
 80027ca:	b507      	push	{r0, r1, r2, lr}
 80027cc:	4906      	ldr	r1, [pc, #24]	; (80027e8 <iscanf+0x20>)
 80027ce:	ab04      	add	r3, sp, #16
 80027d0:	6808      	ldr	r0, [r1, #0]
 80027d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80027d6:	6841      	ldr	r1, [r0, #4]
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f000 feeb 	bl	80035b4 <_vfiscanf_r>
 80027de:	b003      	add	sp, #12
 80027e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027e4:	b004      	add	sp, #16
 80027e6:	4770      	bx	lr
 80027e8:	20000064 	.word	0x20000064

080027ec <setvbuf>:
 80027ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027f0:	461d      	mov	r5, r3
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <setvbuf+0x158>)
 80027f4:	681f      	ldr	r7, [r3, #0]
 80027f6:	4604      	mov	r4, r0
 80027f8:	460e      	mov	r6, r1
 80027fa:	4690      	mov	r8, r2
 80027fc:	b127      	cbz	r7, 8002808 <setvbuf+0x1c>
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	b913      	cbnz	r3, 8002808 <setvbuf+0x1c>
 8002802:	4638      	mov	r0, r7
 8002804:	f7ff ff98 	bl	8002738 <__sinit>
 8002808:	f1b8 0f02 	cmp.w	r8, #2
 800280c:	d006      	beq.n	800281c <setvbuf+0x30>
 800280e:	f1b8 0f01 	cmp.w	r8, #1
 8002812:	f200 8094 	bhi.w	800293e <setvbuf+0x152>
 8002816:	2d00      	cmp	r5, #0
 8002818:	f2c0 8091 	blt.w	800293e <setvbuf+0x152>
 800281c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800281e:	07da      	lsls	r2, r3, #31
 8002820:	d405      	bmi.n	800282e <setvbuf+0x42>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	059b      	lsls	r3, r3, #22
 8002826:	d402      	bmi.n	800282e <setvbuf+0x42>
 8002828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800282a:	f000 f94a 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 800282e:	4621      	mov	r1, r4
 8002830:	4638      	mov	r0, r7
 8002832:	f001 f8a7 	bl	8003984 <_fflush_r>
 8002836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002838:	b141      	cbz	r1, 800284c <setvbuf+0x60>
 800283a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800283e:	4299      	cmp	r1, r3
 8002840:	d002      	beq.n	8002848 <setvbuf+0x5c>
 8002842:	4638      	mov	r0, r7
 8002844:	f000 f940 	bl	8002ac8 <_free_r>
 8002848:	2300      	movs	r3, #0
 800284a:	6363      	str	r3, [r4, #52]	; 0x34
 800284c:	2300      	movs	r3, #0
 800284e:	61a3      	str	r3, [r4, #24]
 8002850:	6063      	str	r3, [r4, #4]
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	0618      	lsls	r0, r3, #24
 8002856:	d503      	bpl.n	8002860 <setvbuf+0x74>
 8002858:	6921      	ldr	r1, [r4, #16]
 800285a:	4638      	mov	r0, r7
 800285c:	f000 f934 	bl	8002ac8 <_free_r>
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	f1b8 0f02 	cmp.w	r8, #2
 800286e:	81a3      	strh	r3, [r4, #12]
 8002870:	d05f      	beq.n	8002932 <setvbuf+0x146>
 8002872:	ab01      	add	r3, sp, #4
 8002874:	466a      	mov	r2, sp
 8002876:	4621      	mov	r1, r4
 8002878:	4638      	mov	r0, r7
 800287a:	f001 f8ab 	bl	80039d4 <__swhatbuf_r>
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	4318      	orrs	r0, r3
 8002882:	81a0      	strh	r0, [r4, #12]
 8002884:	bb2d      	cbnz	r5, 80028d2 <setvbuf+0xe6>
 8002886:	9d00      	ldr	r5, [sp, #0]
 8002888:	4628      	mov	r0, r5
 800288a:	f000 f969 	bl	8002b60 <malloc>
 800288e:	4606      	mov	r6, r0
 8002890:	2800      	cmp	r0, #0
 8002892:	d150      	bne.n	8002936 <setvbuf+0x14a>
 8002894:	f8dd 9000 	ldr.w	r9, [sp]
 8002898:	45a9      	cmp	r9, r5
 800289a:	d13e      	bne.n	800291a <setvbuf+0x12e>
 800289c:	f04f 35ff 	mov.w	r5, #4294967295
 80028a0:	2200      	movs	r2, #0
 80028a2:	60a2      	str	r2, [r4, #8]
 80028a4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80028a8:	6022      	str	r2, [r4, #0]
 80028aa:	6122      	str	r2, [r4, #16]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028b2:	6162      	str	r2, [r4, #20]
 80028b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	07d1      	lsls	r1, r2, #31
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	d404      	bmi.n	80028ca <setvbuf+0xde>
 80028c0:	059b      	lsls	r3, r3, #22
 80028c2:	d402      	bmi.n	80028ca <setvbuf+0xde>
 80028c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028c6:	f000 f8fd 	bl	8002ac4 <__retarget_lock_release_recursive>
 80028ca:	4628      	mov	r0, r5
 80028cc:	b003      	add	sp, #12
 80028ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028d2:	2e00      	cmp	r6, #0
 80028d4:	d0d8      	beq.n	8002888 <setvbuf+0x9c>
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	b913      	cbnz	r3, 80028e0 <setvbuf+0xf4>
 80028da:	4638      	mov	r0, r7
 80028dc:	f7ff ff2c 	bl	8002738 <__sinit>
 80028e0:	f1b8 0f01 	cmp.w	r8, #1
 80028e4:	bf08      	it	eq
 80028e6:	89a3      	ldrheq	r3, [r4, #12]
 80028e8:	6026      	str	r6, [r4, #0]
 80028ea:	bf04      	itt	eq
 80028ec:	f043 0301 	orreq.w	r3, r3, #1
 80028f0:	81a3      	strheq	r3, [r4, #12]
 80028f2:	89a3      	ldrh	r3, [r4, #12]
 80028f4:	f013 0208 	ands.w	r2, r3, #8
 80028f8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80028fc:	d01d      	beq.n	800293a <setvbuf+0x14e>
 80028fe:	07da      	lsls	r2, r3, #31
 8002900:	bf41      	itttt	mi
 8002902:	2200      	movmi	r2, #0
 8002904:	426d      	negmi	r5, r5
 8002906:	60a2      	strmi	r2, [r4, #8]
 8002908:	61a5      	strmi	r5, [r4, #24]
 800290a:	bf58      	it	pl
 800290c:	60a5      	strpl	r5, [r4, #8]
 800290e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002910:	f015 0501 	ands.w	r5, r5, #1
 8002914:	d0d4      	beq.n	80028c0 <setvbuf+0xd4>
 8002916:	2500      	movs	r5, #0
 8002918:	e7d7      	b.n	80028ca <setvbuf+0xde>
 800291a:	4648      	mov	r0, r9
 800291c:	f000 f920 	bl	8002b60 <malloc>
 8002920:	4606      	mov	r6, r0
 8002922:	2800      	cmp	r0, #0
 8002924:	d0ba      	beq.n	800289c <setvbuf+0xb0>
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292c:	81a3      	strh	r3, [r4, #12]
 800292e:	464d      	mov	r5, r9
 8002930:	e7d1      	b.n	80028d6 <setvbuf+0xea>
 8002932:	2500      	movs	r5, #0
 8002934:	e7b4      	b.n	80028a0 <setvbuf+0xb4>
 8002936:	46a9      	mov	r9, r5
 8002938:	e7f5      	b.n	8002926 <setvbuf+0x13a>
 800293a:	60a2      	str	r2, [r4, #8]
 800293c:	e7e7      	b.n	800290e <setvbuf+0x122>
 800293e:	f04f 35ff 	mov.w	r5, #4294967295
 8002942:	e7c2      	b.n	80028ca <setvbuf+0xde>
 8002944:	20000064 	.word	0x20000064

08002948 <__sread>:
 8002948:	b510      	push	{r4, lr}
 800294a:	460c      	mov	r4, r1
 800294c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002950:	f000 f868 	bl	8002a24 <_read_r>
 8002954:	2800      	cmp	r0, #0
 8002956:	bfab      	itete	ge
 8002958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800295a:	89a3      	ldrhlt	r3, [r4, #12]
 800295c:	181b      	addge	r3, r3, r0
 800295e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002962:	bfac      	ite	ge
 8002964:	6563      	strge	r3, [r4, #84]	; 0x54
 8002966:	81a3      	strhlt	r3, [r4, #12]
 8002968:	bd10      	pop	{r4, pc}

0800296a <__swrite>:
 800296a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296e:	461f      	mov	r7, r3
 8002970:	898b      	ldrh	r3, [r1, #12]
 8002972:	05db      	lsls	r3, r3, #23
 8002974:	4605      	mov	r5, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4616      	mov	r6, r2
 800297a:	d505      	bpl.n	8002988 <__swrite+0x1e>
 800297c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002980:	2302      	movs	r3, #2
 8002982:	2200      	movs	r2, #0
 8002984:	f000 f83c 	bl	8002a00 <_lseek_r>
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800298e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	4632      	mov	r2, r6
 8002996:	463b      	mov	r3, r7
 8002998:	4628      	mov	r0, r5
 800299a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	f000 b853 	b.w	8002a48 <_write_r>

080029a2 <__sseek>:
 80029a2:	b510      	push	{r4, lr}
 80029a4:	460c      	mov	r4, r1
 80029a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029aa:	f000 f829 	bl	8002a00 <_lseek_r>
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	bf15      	itete	ne
 80029b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80029b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029be:	81a3      	strheq	r3, [r4, #12]
 80029c0:	bf18      	it	ne
 80029c2:	81a3      	strhne	r3, [r4, #12]
 80029c4:	bd10      	pop	{r4, pc}

080029c6 <__sclose>:
 80029c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ca:	f000 b809 	b.w	80029e0 <_close_r>

080029ce <memset>:
 80029ce:	4402      	add	r2, r0
 80029d0:	4603      	mov	r3, r0
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d100      	bne.n	80029d8 <memset+0xa>
 80029d6:	4770      	bx	lr
 80029d8:	f803 1b01 	strb.w	r1, [r3], #1
 80029dc:	e7f9      	b.n	80029d2 <memset+0x4>
	...

080029e0 <_close_r>:
 80029e0:	b538      	push	{r3, r4, r5, lr}
 80029e2:	4d06      	ldr	r5, [pc, #24]	; (80029fc <_close_r+0x1c>)
 80029e4:	2300      	movs	r3, #0
 80029e6:	4604      	mov	r4, r0
 80029e8:	4608      	mov	r0, r1
 80029ea:	602b      	str	r3, [r5, #0]
 80029ec:	f7fe f8c9 	bl	8000b82 <_close>
 80029f0:	1c43      	adds	r3, r0, #1
 80029f2:	d102      	bne.n	80029fa <_close_r+0x1a>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	b103      	cbz	r3, 80029fa <_close_r+0x1a>
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	2000020c 	.word	0x2000020c

08002a00 <_lseek_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	4d07      	ldr	r5, [pc, #28]	; (8002a20 <_lseek_r+0x20>)
 8002a04:	4604      	mov	r4, r0
 8002a06:	4608      	mov	r0, r1
 8002a08:	4611      	mov	r1, r2
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	602a      	str	r2, [r5, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f7fe f8de 	bl	8000bd0 <_lseek>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d102      	bne.n	8002a1e <_lseek_r+0x1e>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	b103      	cbz	r3, 8002a1e <_lseek_r+0x1e>
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	2000020c 	.word	0x2000020c

08002a24 <_read_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4d07      	ldr	r5, [pc, #28]	; (8002a44 <_read_r+0x20>)
 8002a28:	4604      	mov	r4, r0
 8002a2a:	4608      	mov	r0, r1
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	602a      	str	r2, [r5, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7fe f86c 	bl	8000b10 <_read>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d102      	bne.n	8002a42 <_read_r+0x1e>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	b103      	cbz	r3, 8002a42 <_read_r+0x1e>
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	2000020c 	.word	0x2000020c

08002a48 <_write_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4d07      	ldr	r5, [pc, #28]	; (8002a68 <_write_r+0x20>)
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4608      	mov	r0, r1
 8002a50:	4611      	mov	r1, r2
 8002a52:	2200      	movs	r2, #0
 8002a54:	602a      	str	r2, [r5, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7fe f877 	bl	8000b4a <_write>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d102      	bne.n	8002a66 <_write_r+0x1e>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	b103      	cbz	r3, 8002a66 <_write_r+0x1e>
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	2000020c 	.word	0x2000020c

08002a6c <__errno>:
 8002a6c:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <__errno+0x8>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000064 	.word	0x20000064

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	4d0d      	ldr	r5, [pc, #52]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7c:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a7e:	1b64      	subs	r4, r4, r5
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	2600      	movs	r6, #0
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	4d0b      	ldr	r5, [pc, #44]	; (8002ab8 <__libc_init_array+0x40>)
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <__libc_init_array+0x44>)
 8002a8c:	f001 fb02 	bl	8004094 <_init>
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	2600      	movs	r6, #0
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08004250 	.word	0x08004250
 8002ab4:	08004250 	.word	0x08004250
 8002ab8:	08004250 	.word	0x08004250
 8002abc:	08004254 	.word	0x08004254

08002ac0 <__retarget_lock_init_recursive>:
 8002ac0:	4770      	bx	lr

08002ac2 <__retarget_lock_acquire_recursive>:
 8002ac2:	4770      	bx	lr

08002ac4 <__retarget_lock_release_recursive>:
 8002ac4:	4770      	bx	lr
	...

08002ac8 <_free_r>:
 8002ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002aca:	2900      	cmp	r1, #0
 8002acc:	d044      	beq.n	8002b58 <_free_r+0x90>
 8002ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ad2:	9001      	str	r0, [sp, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8002ada:	bfb8      	it	lt
 8002adc:	18e4      	addlt	r4, r4, r3
 8002ade:	f000 f8e7 	bl	8002cb0 <__malloc_lock>
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <_free_r+0x94>)
 8002ae4:	9801      	ldr	r0, [sp, #4]
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	b933      	cbnz	r3, 8002af8 <_free_r+0x30>
 8002aea:	6063      	str	r3, [r4, #4]
 8002aec:	6014      	str	r4, [r2, #0]
 8002aee:	b003      	add	sp, #12
 8002af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002af4:	f000 b8e2 	b.w	8002cbc <__malloc_unlock>
 8002af8:	42a3      	cmp	r3, r4
 8002afa:	d908      	bls.n	8002b0e <_free_r+0x46>
 8002afc:	6825      	ldr	r5, [r4, #0]
 8002afe:	1961      	adds	r1, r4, r5
 8002b00:	428b      	cmp	r3, r1
 8002b02:	bf01      	itttt	eq
 8002b04:	6819      	ldreq	r1, [r3, #0]
 8002b06:	685b      	ldreq	r3, [r3, #4]
 8002b08:	1949      	addeq	r1, r1, r5
 8002b0a:	6021      	streq	r1, [r4, #0]
 8002b0c:	e7ed      	b.n	8002aea <_free_r+0x22>
 8002b0e:	461a      	mov	r2, r3
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	b10b      	cbz	r3, 8002b18 <_free_r+0x50>
 8002b14:	42a3      	cmp	r3, r4
 8002b16:	d9fa      	bls.n	8002b0e <_free_r+0x46>
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	1855      	adds	r5, r2, r1
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d10b      	bne.n	8002b38 <_free_r+0x70>
 8002b20:	6824      	ldr	r4, [r4, #0]
 8002b22:	4421      	add	r1, r4
 8002b24:	1854      	adds	r4, r2, r1
 8002b26:	42a3      	cmp	r3, r4
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	d1e0      	bne.n	8002aee <_free_r+0x26>
 8002b2c:	681c      	ldr	r4, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	6053      	str	r3, [r2, #4]
 8002b32:	440c      	add	r4, r1
 8002b34:	6014      	str	r4, [r2, #0]
 8002b36:	e7da      	b.n	8002aee <_free_r+0x26>
 8002b38:	d902      	bls.n	8002b40 <_free_r+0x78>
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	6003      	str	r3, [r0, #0]
 8002b3e:	e7d6      	b.n	8002aee <_free_r+0x26>
 8002b40:	6825      	ldr	r5, [r4, #0]
 8002b42:	1961      	adds	r1, r4, r5
 8002b44:	428b      	cmp	r3, r1
 8002b46:	bf04      	itt	eq
 8002b48:	6819      	ldreq	r1, [r3, #0]
 8002b4a:	685b      	ldreq	r3, [r3, #4]
 8002b4c:	6063      	str	r3, [r4, #4]
 8002b4e:	bf04      	itt	eq
 8002b50:	1949      	addeq	r1, r1, r5
 8002b52:	6021      	streq	r1, [r4, #0]
 8002b54:	6054      	str	r4, [r2, #4]
 8002b56:	e7ca      	b.n	8002aee <_free_r+0x26>
 8002b58:	b003      	add	sp, #12
 8002b5a:	bd30      	pop	{r4, r5, pc}
 8002b5c:	20000214 	.word	0x20000214

08002b60 <malloc>:
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <malloc+0xc>)
 8002b62:	4601      	mov	r1, r0
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	f000 b823 	b.w	8002bb0 <_malloc_r>
 8002b6a:	bf00      	nop
 8002b6c:	20000064 	.word	0x20000064

08002b70 <sbrk_aligned>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4e0e      	ldr	r6, [pc, #56]	; (8002bac <sbrk_aligned+0x3c>)
 8002b74:	460c      	mov	r4, r1
 8002b76:	6831      	ldr	r1, [r6, #0]
 8002b78:	4605      	mov	r5, r0
 8002b7a:	b911      	cbnz	r1, 8002b82 <sbrk_aligned+0x12>
 8002b7c:	f001 f9c0 	bl	8003f00 <_sbrk_r>
 8002b80:	6030      	str	r0, [r6, #0]
 8002b82:	4621      	mov	r1, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f001 f9bb 	bl	8003f00 <_sbrk_r>
 8002b8a:	1c43      	adds	r3, r0, #1
 8002b8c:	d00a      	beq.n	8002ba4 <sbrk_aligned+0x34>
 8002b8e:	1cc4      	adds	r4, r0, #3
 8002b90:	f024 0403 	bic.w	r4, r4, #3
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d007      	beq.n	8002ba8 <sbrk_aligned+0x38>
 8002b98:	1a21      	subs	r1, r4, r0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f001 f9b0 	bl	8003f00 <_sbrk_r>
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d101      	bne.n	8002ba8 <sbrk_aligned+0x38>
 8002ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba8:	4620      	mov	r0, r4
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	20000218 	.word	0x20000218

08002bb0 <_malloc_r>:
 8002bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb4:	1ccd      	adds	r5, r1, #3
 8002bb6:	f025 0503 	bic.w	r5, r5, #3
 8002bba:	3508      	adds	r5, #8
 8002bbc:	2d0c      	cmp	r5, #12
 8002bbe:	bf38      	it	cc
 8002bc0:	250c      	movcc	r5, #12
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	4607      	mov	r7, r0
 8002bc6:	db01      	blt.n	8002bcc <_malloc_r+0x1c>
 8002bc8:	42a9      	cmp	r1, r5
 8002bca:	d905      	bls.n	8002bd8 <_malloc_r+0x28>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cac <_malloc_r+0xfc>
 8002bdc:	f000 f868 	bl	8002cb0 <__malloc_lock>
 8002be0:	f8d8 3000 	ldr.w	r3, [r8]
 8002be4:	461c      	mov	r4, r3
 8002be6:	bb5c      	cbnz	r4, 8002c40 <_malloc_r+0x90>
 8002be8:	4629      	mov	r1, r5
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ffc0 	bl	8002b70 <sbrk_aligned>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	d155      	bne.n	8002ca2 <_malloc_r+0xf2>
 8002bf6:	f8d8 4000 	ldr.w	r4, [r8]
 8002bfa:	4626      	mov	r6, r4
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	d145      	bne.n	8002c8c <_malloc_r+0xdc>
 8002c00:	2c00      	cmp	r4, #0
 8002c02:	d048      	beq.n	8002c96 <_malloc_r+0xe6>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	4631      	mov	r1, r6
 8002c08:	4638      	mov	r0, r7
 8002c0a:	eb04 0903 	add.w	r9, r4, r3
 8002c0e:	f001 f977 	bl	8003f00 <_sbrk_r>
 8002c12:	4581      	cmp	r9, r0
 8002c14:	d13f      	bne.n	8002c96 <_malloc_r+0xe6>
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	1a6d      	subs	r5, r5, r1
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	f7ff ffa7 	bl	8002b70 <sbrk_aligned>
 8002c22:	3001      	adds	r0, #1
 8002c24:	d037      	beq.n	8002c96 <_malloc_r+0xe6>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	442b      	add	r3, r5
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d038      	beq.n	8002ca6 <_malloc_r+0xf6>
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	42a2      	cmp	r2, r4
 8002c38:	d12b      	bne.n	8002c92 <_malloc_r+0xe2>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e00f      	b.n	8002c60 <_malloc_r+0xb0>
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	1b52      	subs	r2, r2, r5
 8002c44:	d41f      	bmi.n	8002c86 <_malloc_r+0xd6>
 8002c46:	2a0b      	cmp	r2, #11
 8002c48:	d917      	bls.n	8002c7a <_malloc_r+0xca>
 8002c4a:	1961      	adds	r1, r4, r5
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	6025      	str	r5, [r4, #0]
 8002c50:	bf18      	it	ne
 8002c52:	6059      	strne	r1, [r3, #4]
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	bf08      	it	eq
 8002c58:	f8c8 1000 	streq.w	r1, [r8]
 8002c5c:	5162      	str	r2, [r4, r5]
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	4638      	mov	r0, r7
 8002c62:	f104 060b 	add.w	r6, r4, #11
 8002c66:	f000 f829 	bl	8002cbc <__malloc_unlock>
 8002c6a:	f026 0607 	bic.w	r6, r6, #7
 8002c6e:	1d23      	adds	r3, r4, #4
 8002c70:	1af2      	subs	r2, r6, r3
 8002c72:	d0ae      	beq.n	8002bd2 <_malloc_r+0x22>
 8002c74:	1b9b      	subs	r3, r3, r6
 8002c76:	50a3      	str	r3, [r4, r2]
 8002c78:	e7ab      	b.n	8002bd2 <_malloc_r+0x22>
 8002c7a:	42a3      	cmp	r3, r4
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	d1dd      	bne.n	8002c3c <_malloc_r+0x8c>
 8002c80:	f8c8 2000 	str.w	r2, [r8]
 8002c84:	e7ec      	b.n	8002c60 <_malloc_r+0xb0>
 8002c86:	4623      	mov	r3, r4
 8002c88:	6864      	ldr	r4, [r4, #4]
 8002c8a:	e7ac      	b.n	8002be6 <_malloc_r+0x36>
 8002c8c:	4634      	mov	r4, r6
 8002c8e:	6876      	ldr	r6, [r6, #4]
 8002c90:	e7b4      	b.n	8002bfc <_malloc_r+0x4c>
 8002c92:	4613      	mov	r3, r2
 8002c94:	e7cc      	b.n	8002c30 <_malloc_r+0x80>
 8002c96:	230c      	movs	r3, #12
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f000 f80e 	bl	8002cbc <__malloc_unlock>
 8002ca0:	e797      	b.n	8002bd2 <_malloc_r+0x22>
 8002ca2:	6025      	str	r5, [r4, #0]
 8002ca4:	e7dc      	b.n	8002c60 <_malloc_r+0xb0>
 8002ca6:	605b      	str	r3, [r3, #4]
 8002ca8:	deff      	udf	#255	; 0xff
 8002caa:	bf00      	nop
 8002cac:	20000214 	.word	0x20000214

08002cb0 <__malloc_lock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_lock+0x8>)
 8002cb2:	f7ff bf06 	b.w	8002ac2 <__retarget_lock_acquire_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000210 	.word	0x20000210

08002cbc <__malloc_unlock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_unlock+0x8>)
 8002cbe:	f7ff bf01 	b.w	8002ac4 <__retarget_lock_release_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	20000210 	.word	0x20000210

08002cc8 <__sfputc_r>:
 8002cc8:	6893      	ldr	r3, [r2, #8]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	b410      	push	{r4}
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	da08      	bge.n	8002ce6 <__sfputc_r+0x1e>
 8002cd4:	6994      	ldr	r4, [r2, #24]
 8002cd6:	42a3      	cmp	r3, r4
 8002cd8:	db01      	blt.n	8002cde <__sfputc_r+0x16>
 8002cda:	290a      	cmp	r1, #10
 8002cdc:	d103      	bne.n	8002ce6 <__sfputc_r+0x1e>
 8002cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ce2:	f001 b856 	b.w	8003d92 <__swbuf_r>
 8002ce6:	6813      	ldr	r3, [r2, #0]
 8002ce8:	1c58      	adds	r0, r3, #1
 8002cea:	6010      	str	r0, [r2, #0]
 8002cec:	7019      	strb	r1, [r3, #0]
 8002cee:	4608      	mov	r0, r1
 8002cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <__sfputs_r>:
 8002cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	460f      	mov	r7, r1
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	18d5      	adds	r5, r2, r3
 8002d00:	42ac      	cmp	r4, r5
 8002d02:	d101      	bne.n	8002d08 <__sfputs_r+0x12>
 8002d04:	2000      	movs	r0, #0
 8002d06:	e007      	b.n	8002d18 <__sfputs_r+0x22>
 8002d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d0c:	463a      	mov	r2, r7
 8002d0e:	4630      	mov	r0, r6
 8002d10:	f7ff ffda 	bl	8002cc8 <__sfputc_r>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d1f3      	bne.n	8002d00 <__sfputs_r+0xa>
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d1c <_vfiprintf_r>:
 8002d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d20:	460d      	mov	r5, r1
 8002d22:	b09d      	sub	sp, #116	; 0x74
 8002d24:	4614      	mov	r4, r2
 8002d26:	4698      	mov	r8, r3
 8002d28:	4606      	mov	r6, r0
 8002d2a:	b118      	cbz	r0, 8002d34 <_vfiprintf_r+0x18>
 8002d2c:	6a03      	ldr	r3, [r0, #32]
 8002d2e:	b90b      	cbnz	r3, 8002d34 <_vfiprintf_r+0x18>
 8002d30:	f7ff fd02 	bl	8002738 <__sinit>
 8002d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d36:	07d9      	lsls	r1, r3, #31
 8002d38:	d405      	bmi.n	8002d46 <_vfiprintf_r+0x2a>
 8002d3a:	89ab      	ldrh	r3, [r5, #12]
 8002d3c:	059a      	lsls	r2, r3, #22
 8002d3e:	d402      	bmi.n	8002d46 <_vfiprintf_r+0x2a>
 8002d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d42:	f7ff febe 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 8002d46:	89ab      	ldrh	r3, [r5, #12]
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	d501      	bpl.n	8002d50 <_vfiprintf_r+0x34>
 8002d4c:	692b      	ldr	r3, [r5, #16]
 8002d4e:	b99b      	cbnz	r3, 8002d78 <_vfiprintf_r+0x5c>
 8002d50:	4629      	mov	r1, r5
 8002d52:	4630      	mov	r0, r6
 8002d54:	f001 f85a 	bl	8003e0c <__swsetup_r>
 8002d58:	b170      	cbz	r0, 8002d78 <_vfiprintf_r+0x5c>
 8002d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d5c:	07dc      	lsls	r4, r3, #31
 8002d5e:	d504      	bpl.n	8002d6a <_vfiprintf_r+0x4e>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	b01d      	add	sp, #116	; 0x74
 8002d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6a:	89ab      	ldrh	r3, [r5, #12]
 8002d6c:	0598      	lsls	r0, r3, #22
 8002d6e:	d4f7      	bmi.n	8002d60 <_vfiprintf_r+0x44>
 8002d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d72:	f7ff fea7 	bl	8002ac4 <__retarget_lock_release_recursive>
 8002d76:	e7f3      	b.n	8002d60 <_vfiprintf_r+0x44>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d86:	2330      	movs	r3, #48	; 0x30
 8002d88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002f3c <_vfiprintf_r+0x220>
 8002d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d90:	f04f 0901 	mov.w	r9, #1
 8002d94:	4623      	mov	r3, r4
 8002d96:	469a      	mov	sl, r3
 8002d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d9c:	b10a      	cbz	r2, 8002da2 <_vfiprintf_r+0x86>
 8002d9e:	2a25      	cmp	r2, #37	; 0x25
 8002da0:	d1f9      	bne.n	8002d96 <_vfiprintf_r+0x7a>
 8002da2:	ebba 0b04 	subs.w	fp, sl, r4
 8002da6:	d00b      	beq.n	8002dc0 <_vfiprintf_r+0xa4>
 8002da8:	465b      	mov	r3, fp
 8002daa:	4622      	mov	r2, r4
 8002dac:	4629      	mov	r1, r5
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7ff ffa1 	bl	8002cf6 <__sfputs_r>
 8002db4:	3001      	adds	r0, #1
 8002db6:	f000 80a9 	beq.w	8002f0c <_vfiprintf_r+0x1f0>
 8002dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dbc:	445a      	add	r2, fp
 8002dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8002dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a1 	beq.w	8002f0c <_vfiprintf_r+0x1f0>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dd4:	f10a 0a01 	add.w	sl, sl, #1
 8002dd8:	9304      	str	r3, [sp, #16]
 8002dda:	9307      	str	r3, [sp, #28]
 8002ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002de0:	931a      	str	r3, [sp, #104]	; 0x68
 8002de2:	4654      	mov	r4, sl
 8002de4:	2205      	movs	r2, #5
 8002de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dea:	4854      	ldr	r0, [pc, #336]	; (8002f3c <_vfiprintf_r+0x220>)
 8002dec:	f7fd fa00 	bl	80001f0 <memchr>
 8002df0:	9a04      	ldr	r2, [sp, #16]
 8002df2:	b9d8      	cbnz	r0, 8002e2c <_vfiprintf_r+0x110>
 8002df4:	06d1      	lsls	r1, r2, #27
 8002df6:	bf44      	itt	mi
 8002df8:	2320      	movmi	r3, #32
 8002dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dfe:	0713      	lsls	r3, r2, #28
 8002e00:	bf44      	itt	mi
 8002e02:	232b      	movmi	r3, #43	; 0x2b
 8002e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e08:	f89a 3000 	ldrb.w	r3, [sl]
 8002e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0e:	d015      	beq.n	8002e3c <_vfiprintf_r+0x120>
 8002e10:	9a07      	ldr	r2, [sp, #28]
 8002e12:	4654      	mov	r4, sl
 8002e14:	2000      	movs	r0, #0
 8002e16:	f04f 0c0a 	mov.w	ip, #10
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e20:	3b30      	subs	r3, #48	; 0x30
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	d94d      	bls.n	8002ec2 <_vfiprintf_r+0x1a6>
 8002e26:	b1b0      	cbz	r0, 8002e56 <_vfiprintf_r+0x13a>
 8002e28:	9207      	str	r2, [sp, #28]
 8002e2a:	e014      	b.n	8002e56 <_vfiprintf_r+0x13a>
 8002e2c:	eba0 0308 	sub.w	r3, r0, r8
 8002e30:	fa09 f303 	lsl.w	r3, r9, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	9304      	str	r3, [sp, #16]
 8002e38:	46a2      	mov	sl, r4
 8002e3a:	e7d2      	b.n	8002de2 <_vfiprintf_r+0xc6>
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	1d19      	adds	r1, r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	9103      	str	r1, [sp, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bfbb      	ittet	lt
 8002e48:	425b      	neglt	r3, r3
 8002e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e4e:	9307      	strge	r3, [sp, #28]
 8002e50:	9307      	strlt	r3, [sp, #28]
 8002e52:	bfb8      	it	lt
 8002e54:	9204      	strlt	r2, [sp, #16]
 8002e56:	7823      	ldrb	r3, [r4, #0]
 8002e58:	2b2e      	cmp	r3, #46	; 0x2e
 8002e5a:	d10c      	bne.n	8002e76 <_vfiprintf_r+0x15a>
 8002e5c:	7863      	ldrb	r3, [r4, #1]
 8002e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e60:	d134      	bne.n	8002ecc <_vfiprintf_r+0x1b0>
 8002e62:	9b03      	ldr	r3, [sp, #12]
 8002e64:	1d1a      	adds	r2, r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	9203      	str	r2, [sp, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bfb8      	it	lt
 8002e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e72:	3402      	adds	r4, #2
 8002e74:	9305      	str	r3, [sp, #20]
 8002e76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002f4c <_vfiprintf_r+0x230>
 8002e7a:	7821      	ldrb	r1, [r4, #0]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	4650      	mov	r0, sl
 8002e80:	f7fd f9b6 	bl	80001f0 <memchr>
 8002e84:	b138      	cbz	r0, 8002e96 <_vfiprintf_r+0x17a>
 8002e86:	9b04      	ldr	r3, [sp, #16]
 8002e88:	eba0 000a 	sub.w	r0, r0, sl
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	4082      	lsls	r2, r0
 8002e90:	4313      	orrs	r3, r2
 8002e92:	3401      	adds	r4, #1
 8002e94:	9304      	str	r3, [sp, #16]
 8002e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e9a:	4829      	ldr	r0, [pc, #164]	; (8002f40 <_vfiprintf_r+0x224>)
 8002e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ea0:	2206      	movs	r2, #6
 8002ea2:	f7fd f9a5 	bl	80001f0 <memchr>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d03f      	beq.n	8002f2a <_vfiprintf_r+0x20e>
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <_vfiprintf_r+0x228>)
 8002eac:	bb1b      	cbnz	r3, 8002ef6 <_vfiprintf_r+0x1da>
 8002eae:	9b03      	ldr	r3, [sp, #12]
 8002eb0:	3307      	adds	r3, #7
 8002eb2:	f023 0307 	bic.w	r3, r3, #7
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	9303      	str	r3, [sp, #12]
 8002eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ebc:	443b      	add	r3, r7
 8002ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec0:	e768      	b.n	8002d94 <_vfiprintf_r+0x78>
 8002ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	2001      	movs	r0, #1
 8002eca:	e7a6      	b.n	8002e1a <_vfiprintf_r+0xfe>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	3401      	adds	r4, #1
 8002ed0:	9305      	str	r3, [sp, #20]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f04f 0c0a 	mov.w	ip, #10
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ede:	3a30      	subs	r2, #48	; 0x30
 8002ee0:	2a09      	cmp	r2, #9
 8002ee2:	d903      	bls.n	8002eec <_vfiprintf_r+0x1d0>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0c6      	beq.n	8002e76 <_vfiprintf_r+0x15a>
 8002ee8:	9105      	str	r1, [sp, #20]
 8002eea:	e7c4      	b.n	8002e76 <_vfiprintf_r+0x15a>
 8002eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e7f0      	b.n	8002ed8 <_vfiprintf_r+0x1bc>
 8002ef6:	ab03      	add	r3, sp, #12
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	462a      	mov	r2, r5
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <_vfiprintf_r+0x22c>)
 8002efe:	a904      	add	r1, sp, #16
 8002f00:	4630      	mov	r0, r6
 8002f02:	f3af 8000 	nop.w
 8002f06:	4607      	mov	r7, r0
 8002f08:	1c78      	adds	r0, r7, #1
 8002f0a:	d1d6      	bne.n	8002eba <_vfiprintf_r+0x19e>
 8002f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f0e:	07d9      	lsls	r1, r3, #31
 8002f10:	d405      	bmi.n	8002f1e <_vfiprintf_r+0x202>
 8002f12:	89ab      	ldrh	r3, [r5, #12]
 8002f14:	059a      	lsls	r2, r3, #22
 8002f16:	d402      	bmi.n	8002f1e <_vfiprintf_r+0x202>
 8002f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f1a:	f7ff fdd3 	bl	8002ac4 <__retarget_lock_release_recursive>
 8002f1e:	89ab      	ldrh	r3, [r5, #12]
 8002f20:	065b      	lsls	r3, r3, #25
 8002f22:	f53f af1d 	bmi.w	8002d60 <_vfiprintf_r+0x44>
 8002f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f28:	e71c      	b.n	8002d64 <_vfiprintf_r+0x48>
 8002f2a:	ab03      	add	r3, sp, #12
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	462a      	mov	r2, r5
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <_vfiprintf_r+0x22c>)
 8002f32:	a904      	add	r1, sp, #16
 8002f34:	4630      	mov	r0, r6
 8002f36:	f000 f879 	bl	800302c <_printf_i>
 8002f3a:	e7e4      	b.n	8002f06 <_vfiprintf_r+0x1ea>
 8002f3c:	080041f9 	.word	0x080041f9
 8002f40:	08004203 	.word	0x08004203
 8002f44:	00000000 	.word	0x00000000
 8002f48:	08002cf7 	.word	0x08002cf7
 8002f4c:	080041ff 	.word	0x080041ff

08002f50 <_printf_common>:
 8002f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	4616      	mov	r6, r2
 8002f56:	4699      	mov	r9, r3
 8002f58:	688a      	ldr	r2, [r1, #8]
 8002f5a:	690b      	ldr	r3, [r1, #16]
 8002f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bfb8      	it	lt
 8002f64:	4613      	movlt	r3, r2
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	b10a      	cbz	r2, 8002f76 <_printf_common+0x26>
 8002f72:	3301      	adds	r3, #1
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	0699      	lsls	r1, r3, #26
 8002f7a:	bf42      	ittt	mi
 8002f7c:	6833      	ldrmi	r3, [r6, #0]
 8002f7e:	3302      	addmi	r3, #2
 8002f80:	6033      	strmi	r3, [r6, #0]
 8002f82:	6825      	ldr	r5, [r4, #0]
 8002f84:	f015 0506 	ands.w	r5, r5, #6
 8002f88:	d106      	bne.n	8002f98 <_printf_common+0x48>
 8002f8a:	f104 0a19 	add.w	sl, r4, #25
 8002f8e:	68e3      	ldr	r3, [r4, #12]
 8002f90:	6832      	ldr	r2, [r6, #0]
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	42ab      	cmp	r3, r5
 8002f96:	dc26      	bgt.n	8002fe6 <_printf_common+0x96>
 8002f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f9c:	1e13      	subs	r3, r2, #0
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	bf18      	it	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	0692      	lsls	r2, r2, #26
 8002fa6:	d42b      	bmi.n	8003000 <_printf_common+0xb0>
 8002fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fac:	4649      	mov	r1, r9
 8002fae:	4638      	mov	r0, r7
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d01e      	beq.n	8002ff4 <_printf_common+0xa4>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	6922      	ldr	r2, [r4, #16]
 8002fba:	f003 0306 	and.w	r3, r3, #6
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf02      	ittt	eq
 8002fc2:	68e5      	ldreq	r5, [r4, #12]
 8002fc4:	6833      	ldreq	r3, [r6, #0]
 8002fc6:	1aed      	subeq	r5, r5, r3
 8002fc8:	68a3      	ldr	r3, [r4, #8]
 8002fca:	bf0c      	ite	eq
 8002fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd0:	2500      	movne	r5, #0
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	bfc4      	itt	gt
 8002fd6:	1a9b      	subgt	r3, r3, r2
 8002fd8:	18ed      	addgt	r5, r5, r3
 8002fda:	2600      	movs	r6, #0
 8002fdc:	341a      	adds	r4, #26
 8002fde:	42b5      	cmp	r5, r6
 8002fe0:	d11a      	bne.n	8003018 <_printf_common+0xc8>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e008      	b.n	8002ff8 <_printf_common+0xa8>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	4652      	mov	r2, sl
 8002fea:	4649      	mov	r1, r9
 8002fec:	4638      	mov	r0, r7
 8002fee:	47c0      	blx	r8
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d103      	bne.n	8002ffc <_printf_common+0xac>
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7c6      	b.n	8002f8e <_printf_common+0x3e>
 8003000:	18e1      	adds	r1, r4, r3
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	2030      	movs	r0, #48	; 0x30
 8003006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800300a:	4422      	add	r2, r4
 800300c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003014:	3302      	adds	r3, #2
 8003016:	e7c7      	b.n	8002fa8 <_printf_common+0x58>
 8003018:	2301      	movs	r3, #1
 800301a:	4622      	mov	r2, r4
 800301c:	4649      	mov	r1, r9
 800301e:	4638      	mov	r0, r7
 8003020:	47c0      	blx	r8
 8003022:	3001      	adds	r0, #1
 8003024:	d0e6      	beq.n	8002ff4 <_printf_common+0xa4>
 8003026:	3601      	adds	r6, #1
 8003028:	e7d9      	b.n	8002fde <_printf_common+0x8e>
	...

0800302c <_printf_i>:
 800302c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003030:	7e0f      	ldrb	r7, [r1, #24]
 8003032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003034:	2f78      	cmp	r7, #120	; 0x78
 8003036:	4691      	mov	r9, r2
 8003038:	4680      	mov	r8, r0
 800303a:	460c      	mov	r4, r1
 800303c:	469a      	mov	sl, r3
 800303e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003042:	d807      	bhi.n	8003054 <_printf_i+0x28>
 8003044:	2f62      	cmp	r7, #98	; 0x62
 8003046:	d80a      	bhi.n	800305e <_printf_i+0x32>
 8003048:	2f00      	cmp	r7, #0
 800304a:	f000 80d4 	beq.w	80031f6 <_printf_i+0x1ca>
 800304e:	2f58      	cmp	r7, #88	; 0x58
 8003050:	f000 80c0 	beq.w	80031d4 <_printf_i+0x1a8>
 8003054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800305c:	e03a      	b.n	80030d4 <_printf_i+0xa8>
 800305e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003062:	2b15      	cmp	r3, #21
 8003064:	d8f6      	bhi.n	8003054 <_printf_i+0x28>
 8003066:	a101      	add	r1, pc, #4	; (adr r1, 800306c <_printf_i+0x40>)
 8003068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800306c:	080030c5 	.word	0x080030c5
 8003070:	080030d9 	.word	0x080030d9
 8003074:	08003055 	.word	0x08003055
 8003078:	08003055 	.word	0x08003055
 800307c:	08003055 	.word	0x08003055
 8003080:	08003055 	.word	0x08003055
 8003084:	080030d9 	.word	0x080030d9
 8003088:	08003055 	.word	0x08003055
 800308c:	08003055 	.word	0x08003055
 8003090:	08003055 	.word	0x08003055
 8003094:	08003055 	.word	0x08003055
 8003098:	080031dd 	.word	0x080031dd
 800309c:	08003105 	.word	0x08003105
 80030a0:	08003197 	.word	0x08003197
 80030a4:	08003055 	.word	0x08003055
 80030a8:	08003055 	.word	0x08003055
 80030ac:	080031ff 	.word	0x080031ff
 80030b0:	08003055 	.word	0x08003055
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003055 	.word	0x08003055
 80030bc:	08003055 	.word	0x08003055
 80030c0:	0800319f 	.word	0x0800319f
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	1d1a      	adds	r2, r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	602a      	str	r2, [r5, #0]
 80030cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030d4:	2301      	movs	r3, #1
 80030d6:	e09f      	b.n	8003218 <_printf_i+0x1ec>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	682b      	ldr	r3, [r5, #0]
 80030dc:	0607      	lsls	r7, r0, #24
 80030de:	f103 0104 	add.w	r1, r3, #4
 80030e2:	6029      	str	r1, [r5, #0]
 80030e4:	d501      	bpl.n	80030ea <_printf_i+0xbe>
 80030e6:	681e      	ldr	r6, [r3, #0]
 80030e8:	e003      	b.n	80030f2 <_printf_i+0xc6>
 80030ea:	0646      	lsls	r6, r0, #25
 80030ec:	d5fb      	bpl.n	80030e6 <_printf_i+0xba>
 80030ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80030f2:	2e00      	cmp	r6, #0
 80030f4:	da03      	bge.n	80030fe <_printf_i+0xd2>
 80030f6:	232d      	movs	r3, #45	; 0x2d
 80030f8:	4276      	negs	r6, r6
 80030fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030fe:	485a      	ldr	r0, [pc, #360]	; (8003268 <_printf_i+0x23c>)
 8003100:	230a      	movs	r3, #10
 8003102:	e012      	b.n	800312a <_printf_i+0xfe>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	1d19      	adds	r1, r3, #4
 800310a:	6029      	str	r1, [r5, #0]
 800310c:	0605      	lsls	r5, r0, #24
 800310e:	d501      	bpl.n	8003114 <_printf_i+0xe8>
 8003110:	681e      	ldr	r6, [r3, #0]
 8003112:	e002      	b.n	800311a <_printf_i+0xee>
 8003114:	0641      	lsls	r1, r0, #25
 8003116:	d5fb      	bpl.n	8003110 <_printf_i+0xe4>
 8003118:	881e      	ldrh	r6, [r3, #0]
 800311a:	4853      	ldr	r0, [pc, #332]	; (8003268 <_printf_i+0x23c>)
 800311c:	2f6f      	cmp	r7, #111	; 0x6f
 800311e:	bf0c      	ite	eq
 8003120:	2308      	moveq	r3, #8
 8003122:	230a      	movne	r3, #10
 8003124:	2100      	movs	r1, #0
 8003126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800312a:	6865      	ldr	r5, [r4, #4]
 800312c:	60a5      	str	r5, [r4, #8]
 800312e:	2d00      	cmp	r5, #0
 8003130:	bfa2      	ittt	ge
 8003132:	6821      	ldrge	r1, [r4, #0]
 8003134:	f021 0104 	bicge.w	r1, r1, #4
 8003138:	6021      	strge	r1, [r4, #0]
 800313a:	b90e      	cbnz	r6, 8003140 <_printf_i+0x114>
 800313c:	2d00      	cmp	r5, #0
 800313e:	d04b      	beq.n	80031d8 <_printf_i+0x1ac>
 8003140:	4615      	mov	r5, r2
 8003142:	fbb6 f1f3 	udiv	r1, r6, r3
 8003146:	fb03 6711 	mls	r7, r3, r1, r6
 800314a:	5dc7      	ldrb	r7, [r0, r7]
 800314c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003150:	4637      	mov	r7, r6
 8003152:	42bb      	cmp	r3, r7
 8003154:	460e      	mov	r6, r1
 8003156:	d9f4      	bls.n	8003142 <_printf_i+0x116>
 8003158:	2b08      	cmp	r3, #8
 800315a:	d10b      	bne.n	8003174 <_printf_i+0x148>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	07de      	lsls	r6, r3, #31
 8003160:	d508      	bpl.n	8003174 <_printf_i+0x148>
 8003162:	6923      	ldr	r3, [r4, #16]
 8003164:	6861      	ldr	r1, [r4, #4]
 8003166:	4299      	cmp	r1, r3
 8003168:	bfde      	ittt	le
 800316a:	2330      	movle	r3, #48	; 0x30
 800316c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003174:	1b52      	subs	r2, r2, r5
 8003176:	6122      	str	r2, [r4, #16]
 8003178:	f8cd a000 	str.w	sl, [sp]
 800317c:	464b      	mov	r3, r9
 800317e:	aa03      	add	r2, sp, #12
 8003180:	4621      	mov	r1, r4
 8003182:	4640      	mov	r0, r8
 8003184:	f7ff fee4 	bl	8002f50 <_printf_common>
 8003188:	3001      	adds	r0, #1
 800318a:	d14a      	bne.n	8003222 <_printf_i+0x1f6>
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	b004      	add	sp, #16
 8003192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f043 0320 	orr.w	r3, r3, #32
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	4833      	ldr	r0, [pc, #204]	; (800326c <_printf_i+0x240>)
 80031a0:	2778      	movs	r7, #120	; 0x78
 80031a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	6829      	ldr	r1, [r5, #0]
 80031aa:	061f      	lsls	r7, r3, #24
 80031ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80031b0:	d402      	bmi.n	80031b8 <_printf_i+0x18c>
 80031b2:	065f      	lsls	r7, r3, #25
 80031b4:	bf48      	it	mi
 80031b6:	b2b6      	uxthmi	r6, r6
 80031b8:	07df      	lsls	r7, r3, #31
 80031ba:	bf48      	it	mi
 80031bc:	f043 0320 	orrmi.w	r3, r3, #32
 80031c0:	6029      	str	r1, [r5, #0]
 80031c2:	bf48      	it	mi
 80031c4:	6023      	strmi	r3, [r4, #0]
 80031c6:	b91e      	cbnz	r6, 80031d0 <_printf_i+0x1a4>
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	f023 0320 	bic.w	r3, r3, #32
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	2310      	movs	r3, #16
 80031d2:	e7a7      	b.n	8003124 <_printf_i+0xf8>
 80031d4:	4824      	ldr	r0, [pc, #144]	; (8003268 <_printf_i+0x23c>)
 80031d6:	e7e4      	b.n	80031a2 <_printf_i+0x176>
 80031d8:	4615      	mov	r5, r2
 80031da:	e7bd      	b.n	8003158 <_printf_i+0x12c>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	6826      	ldr	r6, [r4, #0]
 80031e0:	6961      	ldr	r1, [r4, #20]
 80031e2:	1d18      	adds	r0, r3, #4
 80031e4:	6028      	str	r0, [r5, #0]
 80031e6:	0635      	lsls	r5, r6, #24
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	d501      	bpl.n	80031f0 <_printf_i+0x1c4>
 80031ec:	6019      	str	r1, [r3, #0]
 80031ee:	e002      	b.n	80031f6 <_printf_i+0x1ca>
 80031f0:	0670      	lsls	r0, r6, #25
 80031f2:	d5fb      	bpl.n	80031ec <_printf_i+0x1c0>
 80031f4:	8019      	strh	r1, [r3, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	6123      	str	r3, [r4, #16]
 80031fa:	4615      	mov	r5, r2
 80031fc:	e7bc      	b.n	8003178 <_printf_i+0x14c>
 80031fe:	682b      	ldr	r3, [r5, #0]
 8003200:	1d1a      	adds	r2, r3, #4
 8003202:	602a      	str	r2, [r5, #0]
 8003204:	681d      	ldr	r5, [r3, #0]
 8003206:	6862      	ldr	r2, [r4, #4]
 8003208:	2100      	movs	r1, #0
 800320a:	4628      	mov	r0, r5
 800320c:	f7fc fff0 	bl	80001f0 <memchr>
 8003210:	b108      	cbz	r0, 8003216 <_printf_i+0x1ea>
 8003212:	1b40      	subs	r0, r0, r5
 8003214:	6060      	str	r0, [r4, #4]
 8003216:	6863      	ldr	r3, [r4, #4]
 8003218:	6123      	str	r3, [r4, #16]
 800321a:	2300      	movs	r3, #0
 800321c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003220:	e7aa      	b.n	8003178 <_printf_i+0x14c>
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	462a      	mov	r2, r5
 8003226:	4649      	mov	r1, r9
 8003228:	4640      	mov	r0, r8
 800322a:	47d0      	blx	sl
 800322c:	3001      	adds	r0, #1
 800322e:	d0ad      	beq.n	800318c <_printf_i+0x160>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	079b      	lsls	r3, r3, #30
 8003234:	d413      	bmi.n	800325e <_printf_i+0x232>
 8003236:	68e0      	ldr	r0, [r4, #12]
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	4298      	cmp	r0, r3
 800323c:	bfb8      	it	lt
 800323e:	4618      	movlt	r0, r3
 8003240:	e7a6      	b.n	8003190 <_printf_i+0x164>
 8003242:	2301      	movs	r3, #1
 8003244:	4632      	mov	r2, r6
 8003246:	4649      	mov	r1, r9
 8003248:	4640      	mov	r0, r8
 800324a:	47d0      	blx	sl
 800324c:	3001      	adds	r0, #1
 800324e:	d09d      	beq.n	800318c <_printf_i+0x160>
 8003250:	3501      	adds	r5, #1
 8003252:	68e3      	ldr	r3, [r4, #12]
 8003254:	9903      	ldr	r1, [sp, #12]
 8003256:	1a5b      	subs	r3, r3, r1
 8003258:	42ab      	cmp	r3, r5
 800325a:	dcf2      	bgt.n	8003242 <_printf_i+0x216>
 800325c:	e7eb      	b.n	8003236 <_printf_i+0x20a>
 800325e:	2500      	movs	r5, #0
 8003260:	f104 0619 	add.w	r6, r4, #25
 8003264:	e7f5      	b.n	8003252 <_printf_i+0x226>
 8003266:	bf00      	nop
 8003268:	0800420a 	.word	0x0800420a
 800326c:	0800421b 	.word	0x0800421b

08003270 <__svfiscanf_r>:
 8003270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	461d      	mov	r5, r3
 8003276:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003278:	07df      	lsls	r7, r3, #31
 800327a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800327e:	4606      	mov	r6, r0
 8003280:	460c      	mov	r4, r1
 8003282:	4692      	mov	sl, r2
 8003284:	d405      	bmi.n	8003292 <__svfiscanf_r+0x22>
 8003286:	898b      	ldrh	r3, [r1, #12]
 8003288:	0598      	lsls	r0, r3, #22
 800328a:	d402      	bmi.n	8003292 <__svfiscanf_r+0x22>
 800328c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800328e:	f7ff fc18 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 8003292:	2300      	movs	r3, #0
 8003294:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003298:	4baa      	ldr	r3, [pc, #680]	; (8003544 <__svfiscanf_r+0x2d4>)
 800329a:	93a0      	str	r3, [sp, #640]	; 0x280
 800329c:	f10d 0804 	add.w	r8, sp, #4
 80032a0:	4ba9      	ldr	r3, [pc, #676]	; (8003548 <__svfiscanf_r+0x2d8>)
 80032a2:	4faa      	ldr	r7, [pc, #680]	; (800354c <__svfiscanf_r+0x2dc>)
 80032a4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8003550 <__svfiscanf_r+0x2e0>
 80032a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80032ac:	93a1      	str	r3, [sp, #644]	; 0x284
 80032ae:	9500      	str	r5, [sp, #0]
 80032b0:	f89a 3000 	ldrb.w	r3, [sl]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8170 	beq.w	800359a <__svfiscanf_r+0x32a>
 80032ba:	5cf9      	ldrb	r1, [r7, r3]
 80032bc:	f011 0108 	ands.w	r1, r1, #8
 80032c0:	f10a 0501 	add.w	r5, sl, #1
 80032c4:	d019      	beq.n	80032fa <__svfiscanf_r+0x8a>
 80032c6:	6863      	ldr	r3, [r4, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dd0f      	ble.n	80032ec <__svfiscanf_r+0x7c>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	5cba      	ldrb	r2, [r7, r2]
 80032d2:	0711      	lsls	r1, r2, #28
 80032d4:	d401      	bmi.n	80032da <__svfiscanf_r+0x6a>
 80032d6:	46aa      	mov	sl, r5
 80032d8:	e7ea      	b.n	80032b0 <__svfiscanf_r+0x40>
 80032da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80032dc:	3201      	adds	r2, #1
 80032de:	9245      	str	r2, [sp, #276]	; 0x114
 80032e0:	6862      	ldr	r2, [r4, #4]
 80032e2:	3301      	adds	r3, #1
 80032e4:	3a01      	subs	r2, #1
 80032e6:	6062      	str	r2, [r4, #4]
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	e7ec      	b.n	80032c6 <__svfiscanf_r+0x56>
 80032ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80032ee:	4621      	mov	r1, r4
 80032f0:	4630      	mov	r0, r6
 80032f2:	4798      	blx	r3
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d0e9      	beq.n	80032cc <__svfiscanf_r+0x5c>
 80032f8:	e7ed      	b.n	80032d6 <__svfiscanf_r+0x66>
 80032fa:	2b25      	cmp	r3, #37	; 0x25
 80032fc:	d012      	beq.n	8003324 <__svfiscanf_r+0xb4>
 80032fe:	469a      	mov	sl, r3
 8003300:	6863      	ldr	r3, [r4, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f340 8093 	ble.w	800342e <__svfiscanf_r+0x1be>
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	7813      	ldrb	r3, [r2, #0]
 800330c:	4553      	cmp	r3, sl
 800330e:	f040 8144 	bne.w	800359a <__svfiscanf_r+0x32a>
 8003312:	6863      	ldr	r3, [r4, #4]
 8003314:	3b01      	subs	r3, #1
 8003316:	6063      	str	r3, [r4, #4]
 8003318:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800331a:	3201      	adds	r2, #1
 800331c:	3301      	adds	r3, #1
 800331e:	6022      	str	r2, [r4, #0]
 8003320:	9345      	str	r3, [sp, #276]	; 0x114
 8003322:	e7d8      	b.n	80032d6 <__svfiscanf_r+0x66>
 8003324:	9141      	str	r1, [sp, #260]	; 0x104
 8003326:	9143      	str	r1, [sp, #268]	; 0x10c
 8003328:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800332c:	2b2a      	cmp	r3, #42	; 0x2a
 800332e:	bf02      	ittt	eq
 8003330:	2310      	moveq	r3, #16
 8003332:	9341      	streq	r3, [sp, #260]	; 0x104
 8003334:	f10a 0502 	addeq.w	r5, sl, #2
 8003338:	220a      	movs	r2, #10
 800333a:	46aa      	mov	sl, r5
 800333c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003340:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003344:	2b09      	cmp	r3, #9
 8003346:	d91d      	bls.n	8003384 <__svfiscanf_r+0x114>
 8003348:	4881      	ldr	r0, [pc, #516]	; (8003550 <__svfiscanf_r+0x2e0>)
 800334a:	2203      	movs	r2, #3
 800334c:	f7fc ff50 	bl	80001f0 <memchr>
 8003350:	b138      	cbz	r0, 8003362 <__svfiscanf_r+0xf2>
 8003352:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003354:	eba0 0009 	sub.w	r0, r0, r9
 8003358:	2301      	movs	r3, #1
 800335a:	4083      	lsls	r3, r0
 800335c:	4313      	orrs	r3, r2
 800335e:	9341      	str	r3, [sp, #260]	; 0x104
 8003360:	4655      	mov	r5, sl
 8003362:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003366:	2b78      	cmp	r3, #120	; 0x78
 8003368:	d807      	bhi.n	800337a <__svfiscanf_r+0x10a>
 800336a:	2b57      	cmp	r3, #87	; 0x57
 800336c:	d811      	bhi.n	8003392 <__svfiscanf_r+0x122>
 800336e:	2b25      	cmp	r3, #37	; 0x25
 8003370:	d0c5      	beq.n	80032fe <__svfiscanf_r+0x8e>
 8003372:	d857      	bhi.n	8003424 <__svfiscanf_r+0x1b4>
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80c6 	beq.w	8003506 <__svfiscanf_r+0x296>
 800337a:	2303      	movs	r3, #3
 800337c:	9347      	str	r3, [sp, #284]	; 0x11c
 800337e:	230a      	movs	r3, #10
 8003380:	9342      	str	r3, [sp, #264]	; 0x108
 8003382:	e07f      	b.n	8003484 <__svfiscanf_r+0x214>
 8003384:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003386:	fb02 1103 	mla	r1, r2, r3, r1
 800338a:	3930      	subs	r1, #48	; 0x30
 800338c:	9143      	str	r1, [sp, #268]	; 0x10c
 800338e:	4655      	mov	r5, sl
 8003390:	e7d3      	b.n	800333a <__svfiscanf_r+0xca>
 8003392:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003396:	2a20      	cmp	r2, #32
 8003398:	d8ef      	bhi.n	800337a <__svfiscanf_r+0x10a>
 800339a:	a101      	add	r1, pc, #4	; (adr r1, 80033a0 <__svfiscanf_r+0x130>)
 800339c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80033a0:	08003467 	.word	0x08003467
 80033a4:	0800337b 	.word	0x0800337b
 80033a8:	0800337b 	.word	0x0800337b
 80033ac:	080034c5 	.word	0x080034c5
 80033b0:	0800337b 	.word	0x0800337b
 80033b4:	0800337b 	.word	0x0800337b
 80033b8:	0800337b 	.word	0x0800337b
 80033bc:	0800337b 	.word	0x0800337b
 80033c0:	0800337b 	.word	0x0800337b
 80033c4:	0800337b 	.word	0x0800337b
 80033c8:	0800337b 	.word	0x0800337b
 80033cc:	080034db 	.word	0x080034db
 80033d0:	080034c1 	.word	0x080034c1
 80033d4:	0800342b 	.word	0x0800342b
 80033d8:	0800342b 	.word	0x0800342b
 80033dc:	0800342b 	.word	0x0800342b
 80033e0:	0800337b 	.word	0x0800337b
 80033e4:	0800347d 	.word	0x0800347d
 80033e8:	0800337b 	.word	0x0800337b
 80033ec:	0800337b 	.word	0x0800337b
 80033f0:	0800337b 	.word	0x0800337b
 80033f4:	0800337b 	.word	0x0800337b
 80033f8:	080034eb 	.word	0x080034eb
 80033fc:	080034b9 	.word	0x080034b9
 8003400:	0800345f 	.word	0x0800345f
 8003404:	0800337b 	.word	0x0800337b
 8003408:	0800337b 	.word	0x0800337b
 800340c:	080034e7 	.word	0x080034e7
 8003410:	0800337b 	.word	0x0800337b
 8003414:	080034c1 	.word	0x080034c1
 8003418:	0800337b 	.word	0x0800337b
 800341c:	0800337b 	.word	0x0800337b
 8003420:	08003467 	.word	0x08003467
 8003424:	3b45      	subs	r3, #69	; 0x45
 8003426:	2b02      	cmp	r3, #2
 8003428:	d8a7      	bhi.n	800337a <__svfiscanf_r+0x10a>
 800342a:	2305      	movs	r3, #5
 800342c:	e029      	b.n	8003482 <__svfiscanf_r+0x212>
 800342e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003430:	4621      	mov	r1, r4
 8003432:	4630      	mov	r0, r6
 8003434:	4798      	blx	r3
 8003436:	2800      	cmp	r0, #0
 8003438:	f43f af66 	beq.w	8003308 <__svfiscanf_r+0x98>
 800343c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800343e:	07da      	lsls	r2, r3, #31
 8003440:	f140 80a3 	bpl.w	800358a <__svfiscanf_r+0x31a>
 8003444:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003446:	2800      	cmp	r0, #0
 8003448:	d066      	beq.n	8003518 <__svfiscanf_r+0x2a8>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003450:	bf18      	it	ne
 8003452:	f04f 30ff 	movne.w	r0, #4294967295
 8003456:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800345a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003460:	f042 0220 	orr.w	r2, r2, #32
 8003464:	9241      	str	r2, [sp, #260]	; 0x104
 8003466:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	9241      	str	r2, [sp, #260]	; 0x104
 800346e:	2210      	movs	r2, #16
 8003470:	2b6f      	cmp	r3, #111	; 0x6f
 8003472:	9242      	str	r2, [sp, #264]	; 0x108
 8003474:	bf34      	ite	cc
 8003476:	2303      	movcc	r3, #3
 8003478:	2304      	movcs	r3, #4
 800347a:	e002      	b.n	8003482 <__svfiscanf_r+0x212>
 800347c:	2300      	movs	r3, #0
 800347e:	9342      	str	r3, [sp, #264]	; 0x108
 8003480:	2303      	movs	r3, #3
 8003482:	9347      	str	r3, [sp, #284]	; 0x11c
 8003484:	6863      	ldr	r3, [r4, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	dd49      	ble.n	800351e <__svfiscanf_r+0x2ae>
 800348a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800348c:	065b      	lsls	r3, r3, #25
 800348e:	d404      	bmi.n	800349a <__svfiscanf_r+0x22a>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	5cba      	ldrb	r2, [r7, r2]
 8003496:	0710      	lsls	r0, r2, #28
 8003498:	d448      	bmi.n	800352c <__svfiscanf_r+0x2bc>
 800349a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800349c:	2b02      	cmp	r3, #2
 800349e:	dc60      	bgt.n	8003562 <__svfiscanf_r+0x2f2>
 80034a0:	466b      	mov	r3, sp
 80034a2:	4622      	mov	r2, r4
 80034a4:	a941      	add	r1, sp, #260	; 0x104
 80034a6:	4630      	mov	r0, r6
 80034a8:	f000 f898 	bl	80035dc <_scanf_chars>
 80034ac:	2801      	cmp	r0, #1
 80034ae:	d074      	beq.n	800359a <__svfiscanf_r+0x32a>
 80034b0:	2802      	cmp	r0, #2
 80034b2:	f47f af10 	bne.w	80032d6 <__svfiscanf_r+0x66>
 80034b6:	e7c1      	b.n	800343c <__svfiscanf_r+0x1cc>
 80034b8:	2308      	movs	r3, #8
 80034ba:	9342      	str	r3, [sp, #264]	; 0x108
 80034bc:	2304      	movs	r3, #4
 80034be:	e7e0      	b.n	8003482 <__svfiscanf_r+0x212>
 80034c0:	220a      	movs	r2, #10
 80034c2:	e7d5      	b.n	8003470 <__svfiscanf_r+0x200>
 80034c4:	4629      	mov	r1, r5
 80034c6:	4640      	mov	r0, r8
 80034c8:	f000 fb6c 	bl	8003ba4 <__sccl>
 80034cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80034ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d2:	9341      	str	r3, [sp, #260]	; 0x104
 80034d4:	4605      	mov	r5, r0
 80034d6:	2301      	movs	r3, #1
 80034d8:	e7d3      	b.n	8003482 <__svfiscanf_r+0x212>
 80034da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80034dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e0:	9341      	str	r3, [sp, #260]	; 0x104
 80034e2:	2300      	movs	r3, #0
 80034e4:	e7cd      	b.n	8003482 <__svfiscanf_r+0x212>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e7cb      	b.n	8003482 <__svfiscanf_r+0x212>
 80034ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80034ec:	06c3      	lsls	r3, r0, #27
 80034ee:	f53f aef2 	bmi.w	80032d6 <__svfiscanf_r+0x66>
 80034f2:	9b00      	ldr	r3, [sp, #0]
 80034f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80034f6:	1d19      	adds	r1, r3, #4
 80034f8:	9100      	str	r1, [sp, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	07c0      	lsls	r0, r0, #31
 80034fe:	bf4c      	ite	mi
 8003500:	801a      	strhmi	r2, [r3, #0]
 8003502:	601a      	strpl	r2, [r3, #0]
 8003504:	e6e7      	b.n	80032d6 <__svfiscanf_r+0x66>
 8003506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003508:	07d8      	lsls	r0, r3, #31
 800350a:	d405      	bmi.n	8003518 <__svfiscanf_r+0x2a8>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	0599      	lsls	r1, r3, #22
 8003510:	d402      	bmi.n	8003518 <__svfiscanf_r+0x2a8>
 8003512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003514:	f7ff fad6 	bl	8002ac4 <__retarget_lock_release_recursive>
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	e79b      	b.n	8003456 <__svfiscanf_r+0x1e6>
 800351e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003520:	4621      	mov	r1, r4
 8003522:	4630      	mov	r0, r6
 8003524:	4798      	blx	r3
 8003526:	2800      	cmp	r0, #0
 8003528:	d0af      	beq.n	800348a <__svfiscanf_r+0x21a>
 800352a:	e787      	b.n	800343c <__svfiscanf_r+0x1cc>
 800352c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800352e:	3201      	adds	r2, #1
 8003530:	9245      	str	r2, [sp, #276]	; 0x114
 8003532:	6862      	ldr	r2, [r4, #4]
 8003534:	3a01      	subs	r2, #1
 8003536:	2a00      	cmp	r2, #0
 8003538:	6062      	str	r2, [r4, #4]
 800353a:	dd0b      	ble.n	8003554 <__svfiscanf_r+0x2e4>
 800353c:	3301      	adds	r3, #1
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	e7a6      	b.n	8003490 <__svfiscanf_r+0x220>
 8003542:	bf00      	nop
 8003544:	08003c8b 	.word	0x08003c8b
 8003548:	08003ab5 	.word	0x08003ab5
 800354c:	080040f9 	.word	0x080040f9
 8003550:	080041ff 	.word	0x080041ff
 8003554:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003556:	4621      	mov	r1, r4
 8003558:	4630      	mov	r0, r6
 800355a:	4798      	blx	r3
 800355c:	2800      	cmp	r0, #0
 800355e:	d097      	beq.n	8003490 <__svfiscanf_r+0x220>
 8003560:	e76c      	b.n	800343c <__svfiscanf_r+0x1cc>
 8003562:	2b04      	cmp	r3, #4
 8003564:	dc06      	bgt.n	8003574 <__svfiscanf_r+0x304>
 8003566:	466b      	mov	r3, sp
 8003568:	4622      	mov	r2, r4
 800356a:	a941      	add	r1, sp, #260	; 0x104
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f88f 	bl	8003690 <_scanf_i>
 8003572:	e79b      	b.n	80034ac <__svfiscanf_r+0x23c>
 8003574:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <__svfiscanf_r+0x340>)
 8003576:	2b00      	cmp	r3, #0
 8003578:	f43f aead 	beq.w	80032d6 <__svfiscanf_r+0x66>
 800357c:	466b      	mov	r3, sp
 800357e:	4622      	mov	r2, r4
 8003580:	a941      	add	r1, sp, #260	; 0x104
 8003582:	4630      	mov	r0, r6
 8003584:	f3af 8000 	nop.w
 8003588:	e790      	b.n	80034ac <__svfiscanf_r+0x23c>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0599      	lsls	r1, r3, #22
 800358e:	f53f af59 	bmi.w	8003444 <__svfiscanf_r+0x1d4>
 8003592:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003594:	f7ff fa96 	bl	8002ac4 <__retarget_lock_release_recursive>
 8003598:	e754      	b.n	8003444 <__svfiscanf_r+0x1d4>
 800359a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800359c:	07da      	lsls	r2, r3, #31
 800359e:	d405      	bmi.n	80035ac <__svfiscanf_r+0x33c>
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	059b      	lsls	r3, r3, #22
 80035a4:	d402      	bmi.n	80035ac <__svfiscanf_r+0x33c>
 80035a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035a8:	f7ff fa8c 	bl	8002ac4 <__retarget_lock_release_recursive>
 80035ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80035ae:	e752      	b.n	8003456 <__svfiscanf_r+0x1e6>
 80035b0:	00000000 	.word	0x00000000

080035b4 <_vfiscanf_r>:
 80035b4:	b530      	push	{r4, r5, lr}
 80035b6:	4604      	mov	r4, r0
 80035b8:	b085      	sub	sp, #20
 80035ba:	b148      	cbz	r0, 80035d0 <_vfiscanf_r+0x1c>
 80035bc:	6a05      	ldr	r5, [r0, #32]
 80035be:	b93d      	cbnz	r5, 80035d0 <_vfiscanf_r+0x1c>
 80035c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035c4:	9101      	str	r1, [sp, #4]
 80035c6:	f7ff f8b7 	bl	8002738 <__sinit>
 80035ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035ce:	9901      	ldr	r1, [sp, #4]
 80035d0:	4620      	mov	r0, r4
 80035d2:	b005      	add	sp, #20
 80035d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035d8:	f7ff be4a 	b.w	8003270 <__svfiscanf_r>

080035dc <_scanf_chars>:
 80035dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e0:	4615      	mov	r5, r2
 80035e2:	688a      	ldr	r2, [r1, #8]
 80035e4:	4680      	mov	r8, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	b932      	cbnz	r2, 80035f8 <_scanf_chars+0x1c>
 80035ea:	698a      	ldr	r2, [r1, #24]
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2201      	moveq	r2, #1
 80035f2:	f04f 32ff 	movne.w	r2, #4294967295
 80035f6:	608a      	str	r2, [r1, #8]
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800368c <_scanf_chars+0xb0>
 80035fe:	06d1      	lsls	r1, r2, #27
 8003600:	bf5f      	itttt	pl
 8003602:	681a      	ldrpl	r2, [r3, #0]
 8003604:	1d11      	addpl	r1, r2, #4
 8003606:	6019      	strpl	r1, [r3, #0]
 8003608:	6816      	ldrpl	r6, [r2, #0]
 800360a:	2700      	movs	r7, #0
 800360c:	69a0      	ldr	r0, [r4, #24]
 800360e:	b188      	cbz	r0, 8003634 <_scanf_chars+0x58>
 8003610:	2801      	cmp	r0, #1
 8003612:	d107      	bne.n	8003624 <_scanf_chars+0x48>
 8003614:	682a      	ldr	r2, [r5, #0]
 8003616:	7811      	ldrb	r1, [r2, #0]
 8003618:	6962      	ldr	r2, [r4, #20]
 800361a:	5c52      	ldrb	r2, [r2, r1]
 800361c:	b952      	cbnz	r2, 8003634 <_scanf_chars+0x58>
 800361e:	2f00      	cmp	r7, #0
 8003620:	d031      	beq.n	8003686 <_scanf_chars+0xaa>
 8003622:	e022      	b.n	800366a <_scanf_chars+0x8e>
 8003624:	2802      	cmp	r0, #2
 8003626:	d120      	bne.n	800366a <_scanf_chars+0x8e>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003630:	071b      	lsls	r3, r3, #28
 8003632:	d41a      	bmi.n	800366a <_scanf_chars+0x8e>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	06da      	lsls	r2, r3, #27
 8003638:	bf5e      	ittt	pl
 800363a:	682b      	ldrpl	r3, [r5, #0]
 800363c:	781b      	ldrbpl	r3, [r3, #0]
 800363e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003642:	682a      	ldr	r2, [r5, #0]
 8003644:	686b      	ldr	r3, [r5, #4]
 8003646:	3201      	adds	r2, #1
 8003648:	602a      	str	r2, [r5, #0]
 800364a:	68a2      	ldr	r2, [r4, #8]
 800364c:	3b01      	subs	r3, #1
 800364e:	3a01      	subs	r2, #1
 8003650:	606b      	str	r3, [r5, #4]
 8003652:	3701      	adds	r7, #1
 8003654:	60a2      	str	r2, [r4, #8]
 8003656:	b142      	cbz	r2, 800366a <_scanf_chars+0x8e>
 8003658:	2b00      	cmp	r3, #0
 800365a:	dcd7      	bgt.n	800360c <_scanf_chars+0x30>
 800365c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003660:	4629      	mov	r1, r5
 8003662:	4640      	mov	r0, r8
 8003664:	4798      	blx	r3
 8003666:	2800      	cmp	r0, #0
 8003668:	d0d0      	beq.n	800360c <_scanf_chars+0x30>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f013 0310 	ands.w	r3, r3, #16
 8003670:	d105      	bne.n	800367e <_scanf_chars+0xa2>
 8003672:	68e2      	ldr	r2, [r4, #12]
 8003674:	3201      	adds	r2, #1
 8003676:	60e2      	str	r2, [r4, #12]
 8003678:	69a2      	ldr	r2, [r4, #24]
 800367a:	b102      	cbz	r2, 800367e <_scanf_chars+0xa2>
 800367c:	7033      	strb	r3, [r6, #0]
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	443b      	add	r3, r7
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	2000      	movs	r0, #0
 8003686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368a:	bf00      	nop
 800368c:	080040f9 	.word	0x080040f9

08003690 <_scanf_i>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	4698      	mov	r8, r3
 8003696:	4b74      	ldr	r3, [pc, #464]	; (8003868 <_scanf_i+0x1d8>)
 8003698:	460c      	mov	r4, r1
 800369a:	4682      	mov	sl, r0
 800369c:	4616      	mov	r6, r2
 800369e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036a2:	b087      	sub	sp, #28
 80036a4:	ab03      	add	r3, sp, #12
 80036a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036aa:	4b70      	ldr	r3, [pc, #448]	; (800386c <_scanf_i+0x1dc>)
 80036ac:	69a1      	ldr	r1, [r4, #24]
 80036ae:	4a70      	ldr	r2, [pc, #448]	; (8003870 <_scanf_i+0x1e0>)
 80036b0:	2903      	cmp	r1, #3
 80036b2:	bf18      	it	ne
 80036b4:	461a      	movne	r2, r3
 80036b6:	68a3      	ldr	r3, [r4, #8]
 80036b8:	9201      	str	r2, [sp, #4]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80036c0:	bf88      	it	hi
 80036c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80036c6:	4627      	mov	r7, r4
 80036c8:	bf82      	ittt	hi
 80036ca:	eb03 0905 	addhi.w	r9, r3, r5
 80036ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 80036d2:	60a3      	strhi	r3, [r4, #8]
 80036d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80036d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80036dc:	bf98      	it	ls
 80036de:	f04f 0900 	movls.w	r9, #0
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	463d      	mov	r5, r7
 80036e6:	f04f 0b00 	mov.w	fp, #0
 80036ea:	6831      	ldr	r1, [r6, #0]
 80036ec:	ab03      	add	r3, sp, #12
 80036ee:	7809      	ldrb	r1, [r1, #0]
 80036f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f7fc fd7b 	bl	80001f0 <memchr>
 80036fa:	b328      	cbz	r0, 8003748 <_scanf_i+0xb8>
 80036fc:	f1bb 0f01 	cmp.w	fp, #1
 8003700:	d159      	bne.n	80037b6 <_scanf_i+0x126>
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	b92a      	cbnz	r2, 8003712 <_scanf_i+0x82>
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	2308      	movs	r3, #8
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	6063      	str	r3, [r4, #4]
 8003710:	6022      	str	r2, [r4, #0]
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003718:	6022      	str	r2, [r4, #0]
 800371a:	68a2      	ldr	r2, [r4, #8]
 800371c:	1e51      	subs	r1, r2, #1
 800371e:	60a1      	str	r1, [r4, #8]
 8003720:	b192      	cbz	r2, 8003748 <_scanf_i+0xb8>
 8003722:	6832      	ldr	r2, [r6, #0]
 8003724:	1c51      	adds	r1, r2, #1
 8003726:	6031      	str	r1, [r6, #0]
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	f805 2b01 	strb.w	r2, [r5], #1
 800372e:	6872      	ldr	r2, [r6, #4]
 8003730:	3a01      	subs	r2, #1
 8003732:	2a00      	cmp	r2, #0
 8003734:	6072      	str	r2, [r6, #4]
 8003736:	dc07      	bgt.n	8003748 <_scanf_i+0xb8>
 8003738:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800373c:	4631      	mov	r1, r6
 800373e:	4650      	mov	r0, sl
 8003740:	4790      	blx	r2
 8003742:	2800      	cmp	r0, #0
 8003744:	f040 8085 	bne.w	8003852 <_scanf_i+0x1c2>
 8003748:	f10b 0b01 	add.w	fp, fp, #1
 800374c:	f1bb 0f03 	cmp.w	fp, #3
 8003750:	d1cb      	bne.n	80036ea <_scanf_i+0x5a>
 8003752:	6863      	ldr	r3, [r4, #4]
 8003754:	b90b      	cbnz	r3, 800375a <_scanf_i+0xca>
 8003756:	230a      	movs	r3, #10
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	6863      	ldr	r3, [r4, #4]
 800375c:	4945      	ldr	r1, [pc, #276]	; (8003874 <_scanf_i+0x1e4>)
 800375e:	6960      	ldr	r0, [r4, #20]
 8003760:	1ac9      	subs	r1, r1, r3
 8003762:	f000 fa1f 	bl	8003ba4 <__sccl>
 8003766:	f04f 0b00 	mov.w	fp, #0
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03d      	beq.n	80037ee <_scanf_i+0x15e>
 8003772:	6831      	ldr	r1, [r6, #0]
 8003774:	6960      	ldr	r0, [r4, #20]
 8003776:	f891 c000 	ldrb.w	ip, [r1]
 800377a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800377e:	2800      	cmp	r0, #0
 8003780:	d035      	beq.n	80037ee <_scanf_i+0x15e>
 8003782:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003786:	d124      	bne.n	80037d2 <_scanf_i+0x142>
 8003788:	0510      	lsls	r0, r2, #20
 800378a:	d522      	bpl.n	80037d2 <_scanf_i+0x142>
 800378c:	f10b 0b01 	add.w	fp, fp, #1
 8003790:	f1b9 0f00 	cmp.w	r9, #0
 8003794:	d003      	beq.n	800379e <_scanf_i+0x10e>
 8003796:	3301      	adds	r3, #1
 8003798:	f109 39ff 	add.w	r9, r9, #4294967295
 800379c:	60a3      	str	r3, [r4, #8]
 800379e:	6873      	ldr	r3, [r6, #4]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	6073      	str	r3, [r6, #4]
 80037a6:	dd1b      	ble.n	80037e0 <_scanf_i+0x150>
 80037a8:	6833      	ldr	r3, [r6, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	6033      	str	r3, [r6, #0]
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	e7d9      	b.n	800376a <_scanf_i+0xda>
 80037b6:	f1bb 0f02 	cmp.w	fp, #2
 80037ba:	d1ae      	bne.n	800371a <_scanf_i+0x8a>
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80037c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80037c6:	d1bf      	bne.n	8003748 <_scanf_i+0xb8>
 80037c8:	2310      	movs	r3, #16
 80037ca:	6063      	str	r3, [r4, #4]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	e7a2      	b.n	8003718 <_scanf_i+0x88>
 80037d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80037d6:	6022      	str	r2, [r4, #0]
 80037d8:	780b      	ldrb	r3, [r1, #0]
 80037da:	f805 3b01 	strb.w	r3, [r5], #1
 80037de:	e7de      	b.n	800379e <_scanf_i+0x10e>
 80037e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80037e4:	4631      	mov	r1, r6
 80037e6:	4650      	mov	r0, sl
 80037e8:	4798      	blx	r3
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d0df      	beq.n	80037ae <_scanf_i+0x11e>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	05d9      	lsls	r1, r3, #23
 80037f2:	d50d      	bpl.n	8003810 <_scanf_i+0x180>
 80037f4:	42bd      	cmp	r5, r7
 80037f6:	d909      	bls.n	800380c <_scanf_i+0x17c>
 80037f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80037fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003800:	4632      	mov	r2, r6
 8003802:	4650      	mov	r0, sl
 8003804:	4798      	blx	r3
 8003806:	f105 39ff 	add.w	r9, r5, #4294967295
 800380a:	464d      	mov	r5, r9
 800380c:	42bd      	cmp	r5, r7
 800380e:	d028      	beq.n	8003862 <_scanf_i+0x1d2>
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	f012 0210 	ands.w	r2, r2, #16
 8003816:	d113      	bne.n	8003840 <_scanf_i+0x1b0>
 8003818:	702a      	strb	r2, [r5, #0]
 800381a:	6863      	ldr	r3, [r4, #4]
 800381c:	9e01      	ldr	r6, [sp, #4]
 800381e:	4639      	mov	r1, r7
 8003820:	4650      	mov	r0, sl
 8003822:	47b0      	blx	r6
 8003824:	f8d8 3000 	ldr.w	r3, [r8]
 8003828:	6821      	ldr	r1, [r4, #0]
 800382a:	1d1a      	adds	r2, r3, #4
 800382c:	f8c8 2000 	str.w	r2, [r8]
 8003830:	f011 0f20 	tst.w	r1, #32
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	d00f      	beq.n	8003858 <_scanf_i+0x1c8>
 8003838:	6018      	str	r0, [r3, #0]
 800383a:	68e3      	ldr	r3, [r4, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60e3      	str	r3, [r4, #12]
 8003840:	6923      	ldr	r3, [r4, #16]
 8003842:	1bed      	subs	r5, r5, r7
 8003844:	445d      	add	r5, fp
 8003846:	442b      	add	r3, r5
 8003848:	6123      	str	r3, [r4, #16]
 800384a:	2000      	movs	r0, #0
 800384c:	b007      	add	sp, #28
 800384e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003852:	f04f 0b00 	mov.w	fp, #0
 8003856:	e7ca      	b.n	80037ee <_scanf_i+0x15e>
 8003858:	07ca      	lsls	r2, r1, #31
 800385a:	bf4c      	ite	mi
 800385c:	8018      	strhmi	r0, [r3, #0]
 800385e:	6018      	strpl	r0, [r3, #0]
 8003860:	e7eb      	b.n	800383a <_scanf_i+0x1aa>
 8003862:	2001      	movs	r0, #1
 8003864:	e7f2      	b.n	800384c <_scanf_i+0x1bc>
 8003866:	bf00      	nop
 8003868:	080040d4 	.word	0x080040d4
 800386c:	08004081 	.word	0x08004081
 8003870:	08002609 	.word	0x08002609
 8003874:	0800423c 	.word	0x0800423c

08003878 <__sflush_r>:
 8003878:	898a      	ldrh	r2, [r1, #12]
 800387a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387e:	4605      	mov	r5, r0
 8003880:	0710      	lsls	r0, r2, #28
 8003882:	460c      	mov	r4, r1
 8003884:	d458      	bmi.n	8003938 <__sflush_r+0xc0>
 8003886:	684b      	ldr	r3, [r1, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dc05      	bgt.n	8003898 <__sflush_r+0x20>
 800388c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	dc02      	bgt.n	8003898 <__sflush_r+0x20>
 8003892:	2000      	movs	r0, #0
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800389a:	2e00      	cmp	r6, #0
 800389c:	d0f9      	beq.n	8003892 <__sflush_r+0x1a>
 800389e:	2300      	movs	r3, #0
 80038a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038a4:	682f      	ldr	r7, [r5, #0]
 80038a6:	6a21      	ldr	r1, [r4, #32]
 80038a8:	602b      	str	r3, [r5, #0]
 80038aa:	d032      	beq.n	8003912 <__sflush_r+0x9a>
 80038ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	075a      	lsls	r2, r3, #29
 80038b2:	d505      	bpl.n	80038c0 <__sflush_r+0x48>
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	1ac0      	subs	r0, r0, r3
 80038b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038ba:	b10b      	cbz	r3, 80038c0 <__sflush_r+0x48>
 80038bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038be:	1ac0      	subs	r0, r0, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	4602      	mov	r2, r0
 80038c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038c6:	6a21      	ldr	r1, [r4, #32]
 80038c8:	4628      	mov	r0, r5
 80038ca:	47b0      	blx	r6
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	d106      	bne.n	80038e0 <__sflush_r+0x68>
 80038d2:	6829      	ldr	r1, [r5, #0]
 80038d4:	291d      	cmp	r1, #29
 80038d6:	d82b      	bhi.n	8003930 <__sflush_r+0xb8>
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <__sflush_r+0x108>)
 80038da:	410a      	asrs	r2, r1
 80038dc:	07d6      	lsls	r6, r2, #31
 80038de:	d427      	bmi.n	8003930 <__sflush_r+0xb8>
 80038e0:	2200      	movs	r2, #0
 80038e2:	6062      	str	r2, [r4, #4]
 80038e4:	04d9      	lsls	r1, r3, #19
 80038e6:	6922      	ldr	r2, [r4, #16]
 80038e8:	6022      	str	r2, [r4, #0]
 80038ea:	d504      	bpl.n	80038f6 <__sflush_r+0x7e>
 80038ec:	1c42      	adds	r2, r0, #1
 80038ee:	d101      	bne.n	80038f4 <__sflush_r+0x7c>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	b903      	cbnz	r3, 80038f6 <__sflush_r+0x7e>
 80038f4:	6560      	str	r0, [r4, #84]	; 0x54
 80038f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038f8:	602f      	str	r7, [r5, #0]
 80038fa:	2900      	cmp	r1, #0
 80038fc:	d0c9      	beq.n	8003892 <__sflush_r+0x1a>
 80038fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003902:	4299      	cmp	r1, r3
 8003904:	d002      	beq.n	800390c <__sflush_r+0x94>
 8003906:	4628      	mov	r0, r5
 8003908:	f7ff f8de 	bl	8002ac8 <_free_r>
 800390c:	2000      	movs	r0, #0
 800390e:	6360      	str	r0, [r4, #52]	; 0x34
 8003910:	e7c0      	b.n	8003894 <__sflush_r+0x1c>
 8003912:	2301      	movs	r3, #1
 8003914:	4628      	mov	r0, r5
 8003916:	47b0      	blx	r6
 8003918:	1c41      	adds	r1, r0, #1
 800391a:	d1c8      	bne.n	80038ae <__sflush_r+0x36>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0c5      	beq.n	80038ae <__sflush_r+0x36>
 8003922:	2b1d      	cmp	r3, #29
 8003924:	d001      	beq.n	800392a <__sflush_r+0xb2>
 8003926:	2b16      	cmp	r3, #22
 8003928:	d101      	bne.n	800392e <__sflush_r+0xb6>
 800392a:	602f      	str	r7, [r5, #0]
 800392c:	e7b1      	b.n	8003892 <__sflush_r+0x1a>
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003934:	81a3      	strh	r3, [r4, #12]
 8003936:	e7ad      	b.n	8003894 <__sflush_r+0x1c>
 8003938:	690f      	ldr	r7, [r1, #16]
 800393a:	2f00      	cmp	r7, #0
 800393c:	d0a9      	beq.n	8003892 <__sflush_r+0x1a>
 800393e:	0793      	lsls	r3, r2, #30
 8003940:	680e      	ldr	r6, [r1, #0]
 8003942:	bf08      	it	eq
 8003944:	694b      	ldreq	r3, [r1, #20]
 8003946:	600f      	str	r7, [r1, #0]
 8003948:	bf18      	it	ne
 800394a:	2300      	movne	r3, #0
 800394c:	eba6 0807 	sub.w	r8, r6, r7
 8003950:	608b      	str	r3, [r1, #8]
 8003952:	f1b8 0f00 	cmp.w	r8, #0
 8003956:	dd9c      	ble.n	8003892 <__sflush_r+0x1a>
 8003958:	6a21      	ldr	r1, [r4, #32]
 800395a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800395c:	4643      	mov	r3, r8
 800395e:	463a      	mov	r2, r7
 8003960:	4628      	mov	r0, r5
 8003962:	47b0      	blx	r6
 8003964:	2800      	cmp	r0, #0
 8003966:	dc06      	bgt.n	8003976 <__sflush_r+0xfe>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	e78e      	b.n	8003894 <__sflush_r+0x1c>
 8003976:	4407      	add	r7, r0
 8003978:	eba8 0800 	sub.w	r8, r8, r0
 800397c:	e7e9      	b.n	8003952 <__sflush_r+0xda>
 800397e:	bf00      	nop
 8003980:	dfbffffe 	.word	0xdfbffffe

08003984 <_fflush_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	4605      	mov	r5, r0
 800398a:	460c      	mov	r4, r1
 800398c:	b913      	cbnz	r3, 8003994 <_fflush_r+0x10>
 800398e:	2500      	movs	r5, #0
 8003990:	4628      	mov	r0, r5
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	b118      	cbz	r0, 800399e <_fflush_r+0x1a>
 8003996:	6a03      	ldr	r3, [r0, #32]
 8003998:	b90b      	cbnz	r3, 800399e <_fflush_r+0x1a>
 800399a:	f7fe fecd 	bl	8002738 <__sinit>
 800399e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f3      	beq.n	800398e <_fflush_r+0xa>
 80039a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039a8:	07d0      	lsls	r0, r2, #31
 80039aa:	d404      	bmi.n	80039b6 <_fflush_r+0x32>
 80039ac:	0599      	lsls	r1, r3, #22
 80039ae:	d402      	bmi.n	80039b6 <_fflush_r+0x32>
 80039b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039b2:	f7ff f886 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 80039b6:	4628      	mov	r0, r5
 80039b8:	4621      	mov	r1, r4
 80039ba:	f7ff ff5d 	bl	8003878 <__sflush_r>
 80039be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c0:	07da      	lsls	r2, r3, #31
 80039c2:	4605      	mov	r5, r0
 80039c4:	d4e4      	bmi.n	8003990 <_fflush_r+0xc>
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	059b      	lsls	r3, r3, #22
 80039ca:	d4e1      	bmi.n	8003990 <_fflush_r+0xc>
 80039cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ce:	f7ff f879 	bl	8002ac4 <__retarget_lock_release_recursive>
 80039d2:	e7dd      	b.n	8003990 <_fflush_r+0xc>

080039d4 <__swhatbuf_r>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	460c      	mov	r4, r1
 80039d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039dc:	2900      	cmp	r1, #0
 80039de:	b096      	sub	sp, #88	; 0x58
 80039e0:	4615      	mov	r5, r2
 80039e2:	461e      	mov	r6, r3
 80039e4:	da0d      	bge.n	8003a02 <__swhatbuf_r+0x2e>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	bf0c      	ite	eq
 80039f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80039f6:	2340      	movne	r3, #64	; 0x40
 80039f8:	2000      	movs	r0, #0
 80039fa:	6031      	str	r1, [r6, #0]
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	b016      	add	sp, #88	; 0x58
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
 8003a02:	466a      	mov	r2, sp
 8003a04:	f000 fa5a 	bl	8003ebc <_fstat_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	dbec      	blt.n	80039e6 <__swhatbuf_r+0x12>
 8003a0c:	9901      	ldr	r1, [sp, #4]
 8003a0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003a12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003a16:	4259      	negs	r1, r3
 8003a18:	4159      	adcs	r1, r3
 8003a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1e:	e7eb      	b.n	80039f8 <__swhatbuf_r+0x24>

08003a20 <__smakebuf_r>:
 8003a20:	898b      	ldrh	r3, [r1, #12]
 8003a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a24:	079d      	lsls	r5, r3, #30
 8003a26:	4606      	mov	r6, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	d507      	bpl.n	8003a3c <__smakebuf_r+0x1c>
 8003a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	2301      	movs	r3, #1
 8003a36:	6163      	str	r3, [r4, #20]
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	ab01      	add	r3, sp, #4
 8003a3e:	466a      	mov	r2, sp
 8003a40:	f7ff ffc8 	bl	80039d4 <__swhatbuf_r>
 8003a44:	9900      	ldr	r1, [sp, #0]
 8003a46:	4605      	mov	r5, r0
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f7ff f8b1 	bl	8002bb0 <_malloc_r>
 8003a4e:	b948      	cbnz	r0, 8003a64 <__smakebuf_r+0x44>
 8003a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a54:	059a      	lsls	r2, r3, #22
 8003a56:	d4ef      	bmi.n	8003a38 <__smakebuf_r+0x18>
 8003a58:	f023 0303 	bic.w	r3, r3, #3
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	e7e3      	b.n	8003a2c <__smakebuf_r+0xc>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	6163      	str	r3, [r4, #20]
 8003a72:	9b01      	ldr	r3, [sp, #4]
 8003a74:	6120      	str	r0, [r4, #16]
 8003a76:	b15b      	cbz	r3, 8003a90 <__smakebuf_r+0x70>
 8003a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 fa2f 	bl	8003ee0 <_isatty_r>
 8003a82:	b128      	cbz	r0, 8003a90 <__smakebuf_r+0x70>
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	431d      	orrs	r5, r3
 8003a94:	81a5      	strh	r5, [r4, #12]
 8003a96:	e7cf      	b.n	8003a38 <__smakebuf_r+0x18>

08003a98 <lflush>:
 8003a98:	898b      	ldrh	r3, [r1, #12]
 8003a9a:	f003 0309 	and.w	r3, r3, #9
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d103      	bne.n	8003aaa <lflush+0x12>
 8003aa2:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <lflush+0x18>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f7ff bf6d 	b.w	8003984 <_fflush_r>
 8003aaa:	2000      	movs	r0, #0
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000064 	.word	0x20000064

08003ab4 <__srefill_r>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b118      	cbz	r0, 8003ac4 <__srefill_r+0x10>
 8003abc:	6a03      	ldr	r3, [r0, #32]
 8003abe:	b90b      	cbnz	r3, 8003ac4 <__srefill_r+0x10>
 8003ac0:	f7fe fe3a 	bl	8002738 <__sinit>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6063      	str	r3, [r4, #4]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ace:	069e      	lsls	r6, r3, #26
 8003ad0:	d502      	bpl.n	8003ad8 <__srefill_r+0x24>
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	e05c      	b.n	8003b92 <__srefill_r+0xde>
 8003ad8:	0758      	lsls	r0, r3, #29
 8003ada:	d448      	bmi.n	8003b6e <__srefill_r+0xba>
 8003adc:	06d9      	lsls	r1, r3, #27
 8003ade:	d405      	bmi.n	8003aec <__srefill_r+0x38>
 8003ae0:	2309      	movs	r3, #9
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ae8:	81a3      	strh	r3, [r4, #12]
 8003aea:	e7f2      	b.n	8003ad2 <__srefill_r+0x1e>
 8003aec:	071a      	lsls	r2, r3, #28
 8003aee:	d50b      	bpl.n	8003b08 <__srefill_r+0x54>
 8003af0:	4621      	mov	r1, r4
 8003af2:	4628      	mov	r0, r5
 8003af4:	f7ff ff46 	bl	8003984 <_fflush_r>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1ea      	bne.n	8003ad2 <__srefill_r+0x1e>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	60a0      	str	r0, [r4, #8]
 8003b00:	f023 0308 	bic.w	r3, r3, #8
 8003b04:	81a3      	strh	r3, [r4, #12]
 8003b06:	61a0      	str	r0, [r4, #24]
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	b91b      	cbnz	r3, 8003b1c <__srefill_r+0x68>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4628      	mov	r0, r5
 8003b18:	f7ff ff82 	bl	8003a20 <__smakebuf_r>
 8003b1c:	89a6      	ldrh	r6, [r4, #12]
 8003b1e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003b22:	07b3      	lsls	r3, r6, #30
 8003b24:	d00f      	beq.n	8003b46 <__srefill_r+0x92>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <__srefill_r+0xe4>)
 8003b2a:	491c      	ldr	r1, [pc, #112]	; (8003b9c <__srefill_r+0xe8>)
 8003b2c:	481c      	ldr	r0, [pc, #112]	; (8003ba0 <__srefill_r+0xec>)
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	f006 0609 	and.w	r6, r6, #9
 8003b34:	f7fe fe18 	bl	8002768 <_fwalk_sglue>
 8003b38:	2e09      	cmp	r6, #9
 8003b3a:	81a7      	strh	r7, [r4, #12]
 8003b3c:	d103      	bne.n	8003b46 <__srefill_r+0x92>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	f7ff fe99 	bl	8003878 <__sflush_r>
 8003b46:	6922      	ldr	r2, [r4, #16]
 8003b48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b4a:	6963      	ldr	r3, [r4, #20]
 8003b4c:	6a21      	ldr	r1, [r4, #32]
 8003b4e:	6022      	str	r2, [r4, #0]
 8003b50:	4628      	mov	r0, r5
 8003b52:	47b0      	blx	r6
 8003b54:	2800      	cmp	r0, #0
 8003b56:	6060      	str	r0, [r4, #4]
 8003b58:	dc1c      	bgt.n	8003b94 <__srefill_r+0xe0>
 8003b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5e:	bf17      	itett	ne
 8003b60:	2200      	movne	r2, #0
 8003b62:	f043 0320 	orreq.w	r3, r3, #32
 8003b66:	6062      	strne	r2, [r4, #4]
 8003b68:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003b6c:	e7bc      	b.n	8003ae8 <__srefill_r+0x34>
 8003b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b70:	2900      	cmp	r1, #0
 8003b72:	d0cd      	beq.n	8003b10 <__srefill_r+0x5c>
 8003b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b78:	4299      	cmp	r1, r3
 8003b7a:	d002      	beq.n	8003b82 <__srefill_r+0xce>
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f7fe ffa3 	bl	8002ac8 <_free_r>
 8003b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	2000      	movs	r0, #0
 8003b88:	6360      	str	r0, [r4, #52]	; 0x34
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0c0      	beq.n	8003b10 <__srefill_r+0x5c>
 8003b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7fc      	b.n	8003b92 <__srefill_r+0xde>
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	08003a99 	.word	0x08003a99
 8003ba0:	20000018 	.word	0x20000018

08003ba4 <__sccl>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	780b      	ldrb	r3, [r1, #0]
 8003ba8:	4604      	mov	r4, r0
 8003baa:	2b5e      	cmp	r3, #94	; 0x5e
 8003bac:	bf0b      	itete	eq
 8003bae:	784b      	ldrbeq	r3, [r1, #1]
 8003bb0:	1c4a      	addne	r2, r1, #1
 8003bb2:	1c8a      	addeq	r2, r1, #2
 8003bb4:	2100      	movne	r1, #0
 8003bb6:	bf08      	it	eq
 8003bb8:	2101      	moveq	r1, #1
 8003bba:	3801      	subs	r0, #1
 8003bbc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003bc0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003bc4:	42a8      	cmp	r0, r5
 8003bc6:	d1fb      	bne.n	8003bc0 <__sccl+0x1c>
 8003bc8:	b90b      	cbnz	r3, 8003bce <__sccl+0x2a>
 8003bca:	1e50      	subs	r0, r2, #1
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
 8003bce:	f081 0101 	eor.w	r1, r1, #1
 8003bd2:	54e1      	strb	r1, [r4, r3]
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003bdc:	2d2d      	cmp	r5, #45	; 0x2d
 8003bde:	d005      	beq.n	8003bec <__sccl+0x48>
 8003be0:	2d5d      	cmp	r5, #93	; 0x5d
 8003be2:	d016      	beq.n	8003c12 <__sccl+0x6e>
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	d0f1      	beq.n	8003bcc <__sccl+0x28>
 8003be8:	462b      	mov	r3, r5
 8003bea:	e7f2      	b.n	8003bd2 <__sccl+0x2e>
 8003bec:	7846      	ldrb	r6, [r0, #1]
 8003bee:	2e5d      	cmp	r6, #93	; 0x5d
 8003bf0:	d0fa      	beq.n	8003be8 <__sccl+0x44>
 8003bf2:	42b3      	cmp	r3, r6
 8003bf4:	dcf8      	bgt.n	8003be8 <__sccl+0x44>
 8003bf6:	3002      	adds	r0, #2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	3201      	adds	r2, #1
 8003bfc:	4296      	cmp	r6, r2
 8003bfe:	54a1      	strb	r1, [r4, r2]
 8003c00:	dcfb      	bgt.n	8003bfa <__sccl+0x56>
 8003c02:	1af2      	subs	r2, r6, r3
 8003c04:	3a01      	subs	r2, #1
 8003c06:	1c5d      	adds	r5, r3, #1
 8003c08:	42b3      	cmp	r3, r6
 8003c0a:	bfa8      	it	ge
 8003c0c:	2200      	movge	r2, #0
 8003c0e:	18ab      	adds	r3, r5, r2
 8003c10:	e7e1      	b.n	8003bd6 <__sccl+0x32>
 8003c12:	4610      	mov	r0, r2
 8003c14:	e7da      	b.n	8003bcc <__sccl+0x28>

08003c16 <__submore>:
 8003c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d11d      	bne.n	8003c62 <__submore+0x4c>
 8003c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c2a:	f7fe ffc1 	bl	8002bb0 <_malloc_r>
 8003c2e:	b918      	cbnz	r0, 8003c38 <__submore+0x22>
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c3e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003c42:	6360      	str	r0, [r4, #52]	; 0x34
 8003c44:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003c48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003c4c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003c50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003c54:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003c58:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003c5c:	6020      	str	r0, [r4, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e7e8      	b.n	8003c34 <__submore+0x1e>
 8003c62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003c64:	0077      	lsls	r7, r6, #1
 8003c66:	463a      	mov	r2, r7
 8003c68:	f000 f968 	bl	8003f3c <_realloc_r>
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d0de      	beq.n	8003c30 <__submore+0x1a>
 8003c72:	eb00 0806 	add.w	r8, r0, r6
 8003c76:	4601      	mov	r1, r0
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	f000 f950 	bl	8003f20 <memcpy>
 8003c80:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003c84:	f8c4 8000 	str.w	r8, [r4]
 8003c88:	e7e9      	b.n	8003c5e <__submore+0x48>

08003c8a <_ungetc_r>:
 8003c8a:	b570      	push	{r4, r5, r6, lr}
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	1c4a      	adds	r2, r1, #1
 8003c90:	4606      	mov	r6, r0
 8003c92:	460d      	mov	r5, r1
 8003c94:	d103      	bne.n	8003c9e <_ungetc_r+0x14>
 8003c96:	f04f 35ff 	mov.w	r5, #4294967295
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	b118      	cbz	r0, 8003ca8 <_ungetc_r+0x1e>
 8003ca0:	6a03      	ldr	r3, [r0, #32]
 8003ca2:	b90b      	cbnz	r3, 8003ca8 <_ungetc_r+0x1e>
 8003ca4:	f7fe fd48 	bl	8002738 <__sinit>
 8003ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003caa:	07db      	lsls	r3, r3, #31
 8003cac:	d405      	bmi.n	8003cba <_ungetc_r+0x30>
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	0598      	lsls	r0, r3, #22
 8003cb2:	d402      	bmi.n	8003cba <_ungetc_r+0x30>
 8003cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb6:	f7fe ff04 	bl	8002ac2 <__retarget_lock_acquire_recursive>
 8003cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cbe:	f023 0320 	bic.w	r3, r3, #32
 8003cc2:	0759      	lsls	r1, r3, #29
 8003cc4:	81a3      	strh	r3, [r4, #12]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	d423      	bmi.n	8003d12 <_ungetc_r+0x88>
 8003cca:	06d3      	lsls	r3, r2, #27
 8003ccc:	d409      	bmi.n	8003ce2 <_ungetc_r+0x58>
 8003cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd0:	07dd      	lsls	r5, r3, #31
 8003cd2:	d4e0      	bmi.n	8003c96 <_ungetc_r+0xc>
 8003cd4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003cd8:	d1dd      	bne.n	8003c96 <_ungetc_r+0xc>
 8003cda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cdc:	f7fe fef2 	bl	8002ac4 <__retarget_lock_release_recursive>
 8003ce0:	e7d9      	b.n	8003c96 <_ungetc_r+0xc>
 8003ce2:	0710      	lsls	r0, r2, #28
 8003ce4:	d511      	bpl.n	8003d0a <_ungetc_r+0x80>
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f7ff fe4b 	bl	8003984 <_fflush_r>
 8003cee:	b130      	cbz	r0, 8003cfe <_ungetc_r+0x74>
 8003cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf2:	07d9      	lsls	r1, r3, #31
 8003cf4:	d4cf      	bmi.n	8003c96 <_ungetc_r+0xc>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003cfc:	e7ec      	b.n	8003cd8 <_ungetc_r+0x4e>
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	60a0      	str	r0, [r4, #8]
 8003d02:	f023 0308 	bic.w	r3, r3, #8
 8003d06:	81a3      	strh	r3, [r4, #12]
 8003d08:	61a0      	str	r0, [r4, #24]
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d14:	6862      	ldr	r2, [r4, #4]
 8003d16:	b2ed      	uxtb	r5, r5
 8003d18:	b1d3      	cbz	r3, 8003d50 <_ungetc_r+0xc6>
 8003d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	dc05      	bgt.n	8003d2c <_ungetc_r+0xa2>
 8003d20:	4621      	mov	r1, r4
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7ff ff77 	bl	8003c16 <__submore>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d1e1      	bne.n	8003cf0 <_ungetc_r+0x66>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	1e5a      	subs	r2, r3, #1
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003d36:	6863      	ldr	r3, [r4, #4]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	6063      	str	r3, [r4, #4]
 8003d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d3e:	07da      	lsls	r2, r3, #31
 8003d40:	d4ab      	bmi.n	8003c9a <_ungetc_r+0x10>
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	059b      	lsls	r3, r3, #22
 8003d46:	d4a8      	bmi.n	8003c9a <_ungetc_r+0x10>
 8003d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d4a:	f7fe febb 	bl	8002ac4 <__retarget_lock_release_recursive>
 8003d4e:	e7a4      	b.n	8003c9a <_ungetc_r+0x10>
 8003d50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003d52:	6920      	ldr	r0, [r4, #16]
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f001 0101 	and.w	r1, r1, #1
 8003d5a:	b160      	cbz	r0, 8003d76 <_ungetc_r+0xec>
 8003d5c:	4298      	cmp	r0, r3
 8003d5e:	d20a      	bcs.n	8003d76 <_ungetc_r+0xec>
 8003d60:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003d64:	42a8      	cmp	r0, r5
 8003d66:	d106      	bne.n	8003d76 <_ungetc_r+0xec>
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	3201      	adds	r2, #1
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	6062      	str	r2, [r4, #4]
 8003d70:	2900      	cmp	r1, #0
 8003d72:	d192      	bne.n	8003c9a <_ungetc_r+0x10>
 8003d74:	e7e5      	b.n	8003d42 <_ungetc_r+0xb8>
 8003d76:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d7e:	6363      	str	r3, [r4, #52]	; 0x34
 8003d80:	2303      	movs	r3, #3
 8003d82:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d84:	4623      	mov	r3, r4
 8003d86:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	e7ee      	b.n	8003d70 <_ungetc_r+0xe6>

08003d92 <__swbuf_r>:
 8003d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d94:	460e      	mov	r6, r1
 8003d96:	4614      	mov	r4, r2
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b118      	cbz	r0, 8003da4 <__swbuf_r+0x12>
 8003d9c:	6a03      	ldr	r3, [r0, #32]
 8003d9e:	b90b      	cbnz	r3, 8003da4 <__swbuf_r+0x12>
 8003da0:	f7fe fcca 	bl	8002738 <__sinit>
 8003da4:	69a3      	ldr	r3, [r4, #24]
 8003da6:	60a3      	str	r3, [r4, #8]
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	071a      	lsls	r2, r3, #28
 8003dac:	d525      	bpl.n	8003dfa <__swbuf_r+0x68>
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	b31b      	cbz	r3, 8003dfa <__swbuf_r+0x68>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	6922      	ldr	r2, [r4, #16]
 8003db6:	1a98      	subs	r0, r3, r2
 8003db8:	6963      	ldr	r3, [r4, #20]
 8003dba:	b2f6      	uxtb	r6, r6
 8003dbc:	4283      	cmp	r3, r0
 8003dbe:	4637      	mov	r7, r6
 8003dc0:	dc04      	bgt.n	8003dcc <__swbuf_r+0x3a>
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f7ff fddd 	bl	8003984 <_fflush_r>
 8003dca:	b9e0      	cbnz	r0, 8003e06 <__swbuf_r+0x74>
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60a3      	str	r3, [r4, #8]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	6022      	str	r2, [r4, #0]
 8003dd8:	701e      	strb	r6, [r3, #0]
 8003dda:	6962      	ldr	r2, [r4, #20]
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d004      	beq.n	8003dec <__swbuf_r+0x5a>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	07db      	lsls	r3, r3, #31
 8003de6:	d506      	bpl.n	8003df6 <__swbuf_r+0x64>
 8003de8:	2e0a      	cmp	r6, #10
 8003dea:	d104      	bne.n	8003df6 <__swbuf_r+0x64>
 8003dec:	4621      	mov	r1, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7ff fdc8 	bl	8003984 <_fflush_r>
 8003df4:	b938      	cbnz	r0, 8003e06 <__swbuf_r+0x74>
 8003df6:	4638      	mov	r0, r7
 8003df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 f805 	bl	8003e0c <__swsetup_r>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d0d5      	beq.n	8003db2 <__swbuf_r+0x20>
 8003e06:	f04f 37ff 	mov.w	r7, #4294967295
 8003e0a:	e7f4      	b.n	8003df6 <__swbuf_r+0x64>

08003e0c <__swsetup_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <__swsetup_r+0xac>)
 8003e10:	4605      	mov	r5, r0
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	460c      	mov	r4, r1
 8003e16:	b118      	cbz	r0, 8003e20 <__swsetup_r+0x14>
 8003e18:	6a03      	ldr	r3, [r0, #32]
 8003e1a:	b90b      	cbnz	r3, 8003e20 <__swsetup_r+0x14>
 8003e1c:	f7fe fc8c 	bl	8002738 <__sinit>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e26:	0718      	lsls	r0, r3, #28
 8003e28:	d422      	bmi.n	8003e70 <__swsetup_r+0x64>
 8003e2a:	06d9      	lsls	r1, r3, #27
 8003e2c:	d407      	bmi.n	8003e3e <__swsetup_r+0x32>
 8003e2e:	2309      	movs	r3, #9
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	e034      	b.n	8003ea8 <__swsetup_r+0x9c>
 8003e3e:	0758      	lsls	r0, r3, #29
 8003e40:	d512      	bpl.n	8003e68 <__swsetup_r+0x5c>
 8003e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e44:	b141      	cbz	r1, 8003e58 <__swsetup_r+0x4c>
 8003e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	d002      	beq.n	8003e54 <__swsetup_r+0x48>
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f7fe fe3a 	bl	8002ac8 <_free_r>
 8003e54:	2300      	movs	r3, #0
 8003e56:	6363      	str	r3, [r4, #52]	; 0x34
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	2300      	movs	r3, #0
 8003e62:	6063      	str	r3, [r4, #4]
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	f043 0308 	orr.w	r3, r3, #8
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	b94b      	cbnz	r3, 8003e88 <__swsetup_r+0x7c>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7e:	d003      	beq.n	8003e88 <__swsetup_r+0x7c>
 8003e80:	4621      	mov	r1, r4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7ff fdcc 	bl	8003a20 <__smakebuf_r>
 8003e88:	89a0      	ldrh	r0, [r4, #12]
 8003e8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e8e:	f010 0301 	ands.w	r3, r0, #1
 8003e92:	d00a      	beq.n	8003eaa <__swsetup_r+0x9e>
 8003e94:	2300      	movs	r3, #0
 8003e96:	60a3      	str	r3, [r4, #8]
 8003e98:	6963      	ldr	r3, [r4, #20]
 8003e9a:	425b      	negs	r3, r3
 8003e9c:	61a3      	str	r3, [r4, #24]
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	b943      	cbnz	r3, 8003eb4 <__swsetup_r+0xa8>
 8003ea2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ea6:	d1c4      	bne.n	8003e32 <__swsetup_r+0x26>
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
 8003eaa:	0781      	lsls	r1, r0, #30
 8003eac:	bf58      	it	pl
 8003eae:	6963      	ldrpl	r3, [r4, #20]
 8003eb0:	60a3      	str	r3, [r4, #8]
 8003eb2:	e7f4      	b.n	8003e9e <__swsetup_r+0x92>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e7f7      	b.n	8003ea8 <__swsetup_r+0x9c>
 8003eb8:	20000064 	.word	0x20000064

08003ebc <_fstat_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4d07      	ldr	r5, [pc, #28]	; (8003edc <_fstat_r+0x20>)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	f7fc fe66 	bl	8000b9a <_fstat>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d102      	bne.n	8003ed8 <_fstat_r+0x1c>
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	b103      	cbz	r3, 8003ed8 <_fstat_r+0x1c>
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	2000020c 	.word	0x2000020c

08003ee0 <_isatty_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4d06      	ldr	r5, [pc, #24]	; (8003efc <_isatty_r+0x1c>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	f7fc fe65 	bl	8000bba <_isatty>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_isatty_r+0x1a>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_isatty_r+0x1a>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	2000020c 	.word	0x2000020c

08003f00 <_sbrk_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4d06      	ldr	r5, [pc, #24]	; (8003f1c <_sbrk_r+0x1c>)
 8003f04:	2300      	movs	r3, #0
 8003f06:	4604      	mov	r4, r0
 8003f08:	4608      	mov	r0, r1
 8003f0a:	602b      	str	r3, [r5, #0]
 8003f0c:	f7fc fe6e 	bl	8000bec <_sbrk>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_sbrk_r+0x1a>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_sbrk_r+0x1a>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	2000020c 	.word	0x2000020c

08003f20 <memcpy>:
 8003f20:	440a      	add	r2, r1
 8003f22:	4291      	cmp	r1, r2
 8003f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f28:	d100      	bne.n	8003f2c <memcpy+0xc>
 8003f2a:	4770      	bx	lr
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f36:	4291      	cmp	r1, r2
 8003f38:	d1f9      	bne.n	8003f2e <memcpy+0xe>
 8003f3a:	bd10      	pop	{r4, pc}

08003f3c <_realloc_r>:
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	4680      	mov	r8, r0
 8003f42:	4614      	mov	r4, r2
 8003f44:	460e      	mov	r6, r1
 8003f46:	b921      	cbnz	r1, 8003f52 <_realloc_r+0x16>
 8003f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	f7fe be2f 	b.w	8002bb0 <_malloc_r>
 8003f52:	b92a      	cbnz	r2, 8003f60 <_realloc_r+0x24>
 8003f54:	f7fe fdb8 	bl	8002ac8 <_free_r>
 8003f58:	4625      	mov	r5, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f60:	f000 f890 	bl	8004084 <_malloc_usable_size_r>
 8003f64:	4284      	cmp	r4, r0
 8003f66:	4607      	mov	r7, r0
 8003f68:	d802      	bhi.n	8003f70 <_realloc_r+0x34>
 8003f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f6e:	d812      	bhi.n	8003f96 <_realloc_r+0x5a>
 8003f70:	4621      	mov	r1, r4
 8003f72:	4640      	mov	r0, r8
 8003f74:	f7fe fe1c 	bl	8002bb0 <_malloc_r>
 8003f78:	4605      	mov	r5, r0
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d0ed      	beq.n	8003f5a <_realloc_r+0x1e>
 8003f7e:	42bc      	cmp	r4, r7
 8003f80:	4622      	mov	r2, r4
 8003f82:	4631      	mov	r1, r6
 8003f84:	bf28      	it	cs
 8003f86:	463a      	movcs	r2, r7
 8003f88:	f7ff ffca 	bl	8003f20 <memcpy>
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f7fe fd9a 	bl	8002ac8 <_free_r>
 8003f94:	e7e1      	b.n	8003f5a <_realloc_r+0x1e>
 8003f96:	4635      	mov	r5, r6
 8003f98:	e7df      	b.n	8003f5a <_realloc_r+0x1e>
	...

08003f9c <_strtoul_l.constprop.0>:
 8003f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	4f36      	ldr	r7, [pc, #216]	; (800407c <_strtoul_l.constprop.0+0xe0>)
 8003fa2:	4686      	mov	lr, r0
 8003fa4:	460d      	mov	r5, r1
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fac:	5d3e      	ldrb	r6, [r7, r4]
 8003fae:	f016 0608 	ands.w	r6, r6, #8
 8003fb2:	d1f8      	bne.n	8003fa6 <_strtoul_l.constprop.0+0xa>
 8003fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8003fb6:	d130      	bne.n	800401a <_strtoul_l.constprop.0+0x7e>
 8003fb8:	782c      	ldrb	r4, [r5, #0]
 8003fba:	2601      	movs	r6, #1
 8003fbc:	1c85      	adds	r5, r0, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d057      	beq.n	8004072 <_strtoul_l.constprop.0+0xd6>
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d109      	bne.n	8003fda <_strtoul_l.constprop.0+0x3e>
 8003fc6:	2c30      	cmp	r4, #48	; 0x30
 8003fc8:	d107      	bne.n	8003fda <_strtoul_l.constprop.0+0x3e>
 8003fca:	7828      	ldrb	r0, [r5, #0]
 8003fcc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003fd0:	2858      	cmp	r0, #88	; 0x58
 8003fd2:	d149      	bne.n	8004068 <_strtoul_l.constprop.0+0xcc>
 8003fd4:	786c      	ldrb	r4, [r5, #1]
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	3502      	adds	r5, #2
 8003fda:	f04f 38ff 	mov.w	r8, #4294967295
 8003fde:	2700      	movs	r7, #0
 8003fe0:	fbb8 f8f3 	udiv	r8, r8, r3
 8003fe4:	fb03 f908 	mul.w	r9, r3, r8
 8003fe8:	ea6f 0909 	mvn.w	r9, r9
 8003fec:	4638      	mov	r0, r7
 8003fee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003ff2:	f1bc 0f09 	cmp.w	ip, #9
 8003ff6:	d815      	bhi.n	8004024 <_strtoul_l.constprop.0+0x88>
 8003ff8:	4664      	mov	r4, ip
 8003ffa:	42a3      	cmp	r3, r4
 8003ffc:	dd23      	ble.n	8004046 <_strtoul_l.constprop.0+0xaa>
 8003ffe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004002:	d007      	beq.n	8004014 <_strtoul_l.constprop.0+0x78>
 8004004:	4580      	cmp	r8, r0
 8004006:	d31b      	bcc.n	8004040 <_strtoul_l.constprop.0+0xa4>
 8004008:	d101      	bne.n	800400e <_strtoul_l.constprop.0+0x72>
 800400a:	45a1      	cmp	r9, r4
 800400c:	db18      	blt.n	8004040 <_strtoul_l.constprop.0+0xa4>
 800400e:	fb00 4003 	mla	r0, r0, r3, r4
 8004012:	2701      	movs	r7, #1
 8004014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004018:	e7e9      	b.n	8003fee <_strtoul_l.constprop.0+0x52>
 800401a:	2c2b      	cmp	r4, #43	; 0x2b
 800401c:	bf04      	itt	eq
 800401e:	782c      	ldrbeq	r4, [r5, #0]
 8004020:	1c85      	addeq	r5, r0, #2
 8004022:	e7cc      	b.n	8003fbe <_strtoul_l.constprop.0+0x22>
 8004024:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004028:	f1bc 0f19 	cmp.w	ip, #25
 800402c:	d801      	bhi.n	8004032 <_strtoul_l.constprop.0+0x96>
 800402e:	3c37      	subs	r4, #55	; 0x37
 8004030:	e7e3      	b.n	8003ffa <_strtoul_l.constprop.0+0x5e>
 8004032:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004036:	f1bc 0f19 	cmp.w	ip, #25
 800403a:	d804      	bhi.n	8004046 <_strtoul_l.constprop.0+0xaa>
 800403c:	3c57      	subs	r4, #87	; 0x57
 800403e:	e7dc      	b.n	8003ffa <_strtoul_l.constprop.0+0x5e>
 8004040:	f04f 37ff 	mov.w	r7, #4294967295
 8004044:	e7e6      	b.n	8004014 <_strtoul_l.constprop.0+0x78>
 8004046:	1c7b      	adds	r3, r7, #1
 8004048:	d106      	bne.n	8004058 <_strtoul_l.constprop.0+0xbc>
 800404a:	2322      	movs	r3, #34	; 0x22
 800404c:	f8ce 3000 	str.w	r3, [lr]
 8004050:	4638      	mov	r0, r7
 8004052:	b932      	cbnz	r2, 8004062 <_strtoul_l.constprop.0+0xc6>
 8004054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004058:	b106      	cbz	r6, 800405c <_strtoul_l.constprop.0+0xc0>
 800405a:	4240      	negs	r0, r0
 800405c:	2a00      	cmp	r2, #0
 800405e:	d0f9      	beq.n	8004054 <_strtoul_l.constprop.0+0xb8>
 8004060:	b107      	cbz	r7, 8004064 <_strtoul_l.constprop.0+0xc8>
 8004062:	1e69      	subs	r1, r5, #1
 8004064:	6011      	str	r1, [r2, #0]
 8004066:	e7f5      	b.n	8004054 <_strtoul_l.constprop.0+0xb8>
 8004068:	2430      	movs	r4, #48	; 0x30
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1b5      	bne.n	8003fda <_strtoul_l.constprop.0+0x3e>
 800406e:	2308      	movs	r3, #8
 8004070:	e7b3      	b.n	8003fda <_strtoul_l.constprop.0+0x3e>
 8004072:	2c30      	cmp	r4, #48	; 0x30
 8004074:	d0a9      	beq.n	8003fca <_strtoul_l.constprop.0+0x2e>
 8004076:	230a      	movs	r3, #10
 8004078:	e7af      	b.n	8003fda <_strtoul_l.constprop.0+0x3e>
 800407a:	bf00      	nop
 800407c:	080040f9 	.word	0x080040f9

08004080 <_strtoul_r>:
 8004080:	f7ff bf8c 	b.w	8003f9c <_strtoul_l.constprop.0>

08004084 <_malloc_usable_size_r>:
 8004084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004088:	1f18      	subs	r0, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfbc      	itt	lt
 800408e:	580b      	ldrlt	r3, [r1, r0]
 8004090:	18c0      	addlt	r0, r0, r3
 8004092:	4770      	bx	lr

08004094 <_init>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr

080040a0 <_fini>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr
